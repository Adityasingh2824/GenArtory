{"version":3,"sources":["../../src/index.ts","../../src/AccountInfo.ts","../../src/chains.ts","../../src/detect.ts","../../src/errors.ts","../../src/features/aptosSignAndSubmitTransaction.ts","../../src/features/aptosSignMessage.ts","../../src/features/aptosGetAccount.ts","../../src/features/aptosConnect.ts","../../src/features/aptosGetNetwork.ts","../../src/features/aptosOnAccountChange.ts","../../src/features/aptosOnNetworkChange.ts","../../src/features/aptosChangeNetwork.ts","../../src/features/aptosDisconnect.ts","../../src/features/aptosSignTransaction.ts","../../src/misc.ts"],"names":["AccountAddress","AnyPublicKey","Ed25519PublicKey","MultiEd25519PublicKey","MultiKey","Serializable","SigningScheme","AccountInfo","_AccountInfo","address","publicKey","ansName","serializer","deserializer","variant","APTOS_DEVNET_CHAIN","APTOS_TESTNET_CHAIN","APTOS_LOCALNET_CHAIN","APTOS_MAINNET_CHAIN","APTOS_CHAINS","getWallets","REQUIRED_FEATURES","isWalletWithRequiredFeatureSet","wallet","additionalFeatures","feature","getAptosWallets","get","on","wallets","aptosWallets","AptosWalletErrorCode","AptosWalletErrors","AptosWalletError","_AptosWalletError","code","message","AptosSignAndSubmitTransactionNamespace","AptosSignMessageNamespace","AptosGetAccountNamespace","AptosConnectNamespace","AptosGetNetworkNamespace","AptosOnAccountChangeNamespace","AptosOnNetworkChangeNamespace","AptosChangeNetworkNamespace","AptosDisconnectNamespace","AptosSignTransactionNamespace","UserResponseStatus"],"mappings":"AAGA,WAAc,wBCHd,OACE,kBAAAA,EAAqC,gBAAAC,EAErC,oBAAAC,EACA,yBAAAC,EAAuB,YAAAC,EAEvB,gBAAAC,EACY,iBAAAC,MACP,qBAQA,IAAMC,EAAN,MAAMC,UAAoBH,CAAa,CAK5C,YAAY,CAAE,QAAAI,EAAS,UAAAC,EAAW,QAAAC,CAAQ,EAAqB,CAC7D,MAAM,EACN,KAAK,QAAUX,EAAe,KAAKS,CAAO,EAC1C,KAAK,UAAYC,EACjB,KAAK,QAAUC,CACjB,CAEA,UAAUC,EAAwB,CAEhC,GADA,KAAK,QAAQ,UAAUA,CAAU,EAC7B,KAAK,qBAAqBV,EAC5BU,EAAW,sBAAsBN,EAAc,OAAO,UAC7C,KAAK,qBAAqBH,EACnCS,EAAW,sBAAsBN,EAAc,YAAY,UAClD,KAAK,qBAAqBL,EACnCW,EAAW,sBAAsBN,EAAc,SAAS,UAC/C,KAAK,qBAAqBF,EACnCQ,EAAW,sBAAsBN,EAAc,QAAQ,MAEvD,OAAM,IAAI,MAAM,wBAAwB,EAE1C,KAAK,UAAU,UAAUM,CAAU,EACnCA,EAAW,aAAa,KAAK,SAAW,EAAE,CAC5C,CAEA,OAAO,YAAYC,EAA4B,CAC7C,IAAMJ,EAAUT,EAAe,YAAYa,CAAY,EACjDC,EAAUD,EAAa,wBAAwB,EACjDH,EACJ,OAAQI,EAAS,CACf,KAAKR,EAAc,QACjBI,EAAYR,EAAiB,YAAYW,CAAY,EACrD,MACF,KAAKP,EAAc,aACjBI,EAAYP,EAAsB,YAAYU,CAAY,EAC1D,MACF,KAAKP,EAAc,UACjBI,EAAYT,EAAa,YAAYY,CAAY,EACjD,MACF,KAAKP,EAAc,SACjBI,EAAYN,EAAS,YAAYS,CAAY,EAC7C,MACF,QACE,MAAM,IAAI,MAAM,+CAA+CC,CAAO,EAAE,CAC5E,CACA,IAAMH,EAAUE,EAAa,eAAe,GAAK,OACjD,OAAO,IAAIL,EAAY,CAAE,QAAAC,EAAS,UAAAC,EAAW,QAAAC,CAAQ,CAAC,CACxD,CACF,EC/DO,IAAMI,EAAqB,eAGrBC,EAAsB,gBAGtBC,EAAuB,iBAGvBC,EAAsB,gBAEtBC,EAAe,CAC1BJ,EACAC,EACAC,EACAC,CACF,EClBA,OAIE,cAAAE,MACK,wBAOP,IAAMC,EAAyD,CAC7D,gBACA,gBACA,mBACA,gBACA,wBACA,wBACA,oBACA,uBACF,EAEO,SAASC,EACdC,EACAC,EAAmD,CAAC,EAC0B,CAC9E,MAAO,CAAC,GAAGH,EAAmB,GAAGG,CAAkB,EAAE,MAClDC,GAAYA,KAAWF,EAAO,QACjC,CACF,CAMO,SAASG,GAMd,CACA,GAAM,CAAE,IAAAC,EAAK,GAAAC,CAAG,EAAIR,EAAW,EAEzBS,EAAUF,EAAI,EAEdG,EAAyB,CAAC,EAEhC,OAAAD,EAAQ,IAAKN,GAAmB,CACdD,EAA+BC,CAAM,GAGnDO,EAAa,KAAKP,CAAM,CAE5B,CAAC,EAEM,CAAE,aAAcO,EAA+B,GAAAF,CAAG,CAC3D,CC7DO,IAAKG,OACVA,IAAA,aAAe,MAAf,eACAA,IAAA,cAAgB,QAAhB,gBAFUA,OAAA,IAKCC,EAAoB,OAAO,OAAO,CAC5C,KAAoC,CACnC,OAAQ,eACR,QAAS,0EACX,EACA,CAAC,MAAkC,EAAG,CACpC,OAAQ,iBACR,QAAS,yCACX,CACF,CAAC,EAEYC,EAAN,MAAMC,UAAyB,KAAM,CAI1C,YAAYC,EAAcC,EAAkB,CAC1C,MACEA,GACEJ,EAAkBG,CAAsC,GAAG,SAC3D,wBACJ,EACA,KAAK,KAAOA,EACZ,KAAK,OACHH,EAAkBG,CAAsC,GAAG,QAAU,gBACvE,KAAK,KAAO,mBACZ,OAAO,eAAe,KAAMD,EAAiB,SAAS,CACxD,CACF,ECxBO,IAAMG,EAAyC,iCCC/C,IAAMC,EAA4B,oBCDlC,IAAMC,EAA2B,gBCCjC,IAAMC,EAAwB,gBCD9B,IAAMC,EAA2B,gBCAjC,IAAMC,EAAgC,wBCAtC,IAAMC,EAAgC,wBCAtC,IAAMC,GAA8B,sBCFpC,IAAMC,GAA2B,mBCGjC,IAAMC,GAAgC,wBCMtC,IAAKC,OACVA,EAAA,SAAW,WACXA,EAAA,SAAW,WAFDA,OAAA","sourcesContent":["// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from '@wallet-standard/core'\n\nexport * from './account'\nexport * from './AccountInfo'\nexport * from './chains'\nexport * from './detect'\nexport * from './errors'\nexport * from './features'\nexport * from './misc'\nexport * from './wallet'\n","import {\n  AccountAddress, AccountAddressInput, AnyPublicKey,\n  Deserializer,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey, MultiKey,\n  PublicKey,\n  Serializable,\n  Serializer, SigningScheme\n} from '@aptos-labs/ts-sdk'\n\nexport interface AccountInfoInput {\n  address: AccountAddressInput\n  publicKey: PublicKey\n  ansName?: string\n}\n\nexport class AccountInfo extends Serializable {\n  readonly address: AccountAddress\n  readonly publicKey: PublicKey\n  readonly ansName?: string\n\n  constructor({ address, publicKey, ansName }: AccountInfoInput) {\n    super()\n    this.address = AccountAddress.from(address)\n    this.publicKey = publicKey\n    this.ansName = ansName\n  }\n\n  serialize(serializer: Serializer) {\n    this.address.serialize(serializer)\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.Ed25519)\n    } else if (this.publicKey instanceof MultiEd25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519)\n    } else if (this.publicKey instanceof AnyPublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.SingleKey)\n    } else if (this.publicKey instanceof MultiKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiKey)\n    } else {\n      throw new Error('Unsupported public key')\n    }\n    this.publicKey.serialize(serializer)\n    serializer.serializeStr(this.ansName ?? '')\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const address = AccountAddress.deserialize(deserializer)\n    const variant = deserializer.deserializeUleb128AsU32()\n    let publicKey: PublicKey\n    switch (variant) {\n      case SigningScheme.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiEd25519:\n        publicKey = MultiEd25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.SingleKey:\n        publicKey = AnyPublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiKey:\n        publicKey = MultiKey.deserialize(deserializer)\n        break\n      default:\n        throw new Error(`Unknown variant index for WrappedPublicKey: ${variant}`)\n    }\n    const ansName = deserializer.deserializeStr() || undefined\n    return new AccountInfo({ address, publicKey, ansName })\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nexport type ChainsId = `${string}:${string}` // e.g. 'aptos:devnet'\n/** APTOS Devnet */\nexport const APTOS_DEVNET_CHAIN = 'aptos:devnet'\n\n/** APTOS Testnet */\nexport const APTOS_TESTNET_CHAIN = 'aptos:testnet'\n\n/** APTOS Localnet */\nexport const APTOS_LOCALNET_CHAIN = 'aptos:localnet'\n\n/** APTOS Mainnet */\nexport const APTOS_MAINNET_CHAIN = 'aptos:mainnet'\n\nexport const APTOS_CHAINS = [\n  APTOS_DEVNET_CHAIN,\n  APTOS_TESTNET_CHAIN,\n  APTOS_LOCALNET_CHAIN,\n  APTOS_MAINNET_CHAIN\n] as const\n\nexport type AptosChain =\n  | typeof APTOS_DEVNET_CHAIN\n  | typeof APTOS_TESTNET_CHAIN\n  | typeof APTOS_LOCALNET_CHAIN\n  | typeof APTOS_MAINNET_CHAIN\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  Wallet,\n  WalletWithFeatures,\n  WalletsEventsListeners,\n  getWallets\n} from '@wallet-standard/core'\n\nimport { MinimallyRequiredFeatures } from './features'\nimport { AptosWallet } from './wallet'\n\n// These features are absolutely required for wallets to function in the Aptos ecosystem.\n// Eventually, as wallets have more consistent support of features, we may want to extend this list.\nconst REQUIRED_FEATURES: (keyof MinimallyRequiredFeatures)[] = [\n  'aptos:account',\n  'aptos:connect',\n  'aptos:disconnect',\n  'aptos:network',\n  'aptos:onAccountChange',\n  'aptos:onNetworkChange',\n  'aptos:signMessage',\n  'aptos:signTransaction'\n]\n\nexport function isWalletWithRequiredFeatureSet<AdditionalFeatures extends Wallet['features']>(\n  wallet: Wallet,\n  additionalFeatures: (keyof AdditionalFeatures)[] = []\n): wallet is WalletWithFeatures<MinimallyRequiredFeatures & AdditionalFeatures> {\n  return [...REQUIRED_FEATURES, ...additionalFeatures].every(\n    (feature) => feature in wallet.features\n  )\n}\n\n/**\n * Helper function to get only Aptos wallets\n * @returns Aptos compatible wallets and `on` event to listen to wallets register event\n */\nexport function getAptosWallets(): {\n  aptosWallets: AptosWallet[]\n  on: <E extends keyof WalletsEventsListeners>(\n    event: E,\n    listener: WalletsEventsListeners[E]\n  ) => () => void\n} {\n  const { get, on } = getWallets()\n\n  const wallets = get()\n\n  const aptosWallets: Wallet[] = []\n\n  wallets.map((wallet: Wallet) => {\n    const isAptos = isWalletWithRequiredFeatureSet(wallet)\n\n    if (isAptos) {\n      aptosWallets.push(wallet)\n    }\n  })\n\n  return { aptosWallets: aptosWallets as AptosWallet[], on }\n}\n","export enum AptosWalletErrorCode {\n  Unauthorized = 4100,\n  InternalError = -30001\n}\n\nexport const AptosWalletErrors = Object.freeze({\n  [AptosWalletErrorCode.Unauthorized]: {\n    status: 'Unauthorized',\n    message: 'The requested method and/or account has not been authorized by the user.'\n  },\n  [AptosWalletErrorCode.InternalError]: {\n    status: 'Internal error',\n    message: 'Something went wrong within the wallet.'\n  }\n})\n\nexport class AptosWalletError extends Error {\n  readonly code: number\n  readonly status: string\n\n  constructor(code: number, message?: string) {\n    super(\n      message ??\n        AptosWalletErrors[code as keyof typeof AptosWalletErrors]?.message ??\n        'Unknown error occurred'\n    )\n    this.code = code\n    this.status =\n      AptosWalletErrors[code as keyof typeof AptosWalletErrors]?.status ?? 'Unknown error'\n    this.name = 'AptosWalletError'\n    Object.setPrototypeOf(this, AptosWalletError.prototype)\n  }\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnyRawTransaction, PendingTransactionResponse } from '@aptos-labs/ts-sdk'\nimport { UserResponse } from '../misc'\n/** Version of the feature. */\nexport type AptosSignAndSubmitTransactionVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosSignAndSubmitTransactionNamespace = 'aptos:signAndSubmitTransaction'\n/**\n * A Wallet Standard feature for signing a transaction, and returning the\n * hash of the transaction.\n */\nexport type AptosSignAndSubmitTransactionFeature = {\n  /** Namespace for the feature. */\n  [AptosSignAndSubmitTransactionNamespace]: {\n    /** Version of the feature API. */\n    version: AptosSignAndSubmitTransactionVersion\n    signAndSubmitTransaction: AptosSignAndSubmitTransactionMethod\n  }\n}\n/** TODO: docs */\nexport type AptosSignAndSubmitTransactionMethod = (\n  transaction: AptosSignAndSubmitTransactionInput\n) => Promise<UserResponse<AptosSignAndSubmitTransactionOutput>>\n\n/** TODO: docs */\nexport type AptosSignAndSubmitTransactionInput = AnyRawTransaction\n/** Output of signing transactions. */\nexport type AptosSignAndSubmitTransactionOutput = PendingTransactionResponse\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Signature } from '@aptos-labs/ts-sdk'\nimport { UserResponse } from '../misc'\n\n/** Version of the feature. */\nexport type AptosSignMessageVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosSignMessageNamespace = 'aptos:signMessage'\n\n/** TODO: docs */\nexport type AptosSignMessageFeature = {\n  /** Namespace for the feature. */\n  [AptosSignMessageNamespace]: {\n    /** Version of the feature API. */\n    version: AptosSignMessageVersion\n    signMessage: AptosSignMessageMethod\n  }\n}\n/** TODO: docs */\nexport type AptosSignMessageMethod = (\n  input: AptosSignMessageInput\n) => Promise<UserResponse<AptosSignMessageOutput>>\n\n/** TODO: docs */\nexport type AptosSignMessageInput = {\n  address?: boolean\n  application?: boolean\n  chainId?: boolean\n  message: string\n  nonce: string\n}\n\n/** TODO: docs */\nexport type AptosSignMessageOutput = {\n  address?: string\n  application?: string\n  chainId?: number\n  fullMessage: string\n  message: string\n  nonce: string\n  prefix: 'APTOS'\n  signature: Signature\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountInfo } from '../AccountInfo'\n\n/** Version of the feature. */\nexport type AptosGetAccountVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosGetAccountNamespace = 'aptos:account'\n\n/** TODO: docs */\nexport type AptosGetAccountFeature = {\n  /** Namespace for the feature. */\n  [AptosGetAccountNamespace]: {\n    /** Version of the feature API. */\n    version: AptosGetAccountVersion\n    account: AptosGetAccountMethod\n  }\n}\n/** TODO: docs */\nexport type AptosGetAccountMethod = () => Promise<AptoGetsAccountOutput>\n/** TODO: docs */\nexport type AptoGetsAccountOutput = AccountInfo\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountInfo } from '../AccountInfo'\nimport { NetworkInfo, UserResponse } from '../misc'\n\n/** Version of the feature. */\nexport type AptosConnectVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosConnectNamespace = 'aptos:connect'\n/** TODO: docs */\nexport type AptosConnectFeature = {\n  /** Namespace for the feature. */\n  [AptosConnectNamespace]: {\n    /** Version of the feature API. */\n    version: AptosConnectVersion\n    connect: AptosConnectMethod\n  }\n}\n/** TODO: docs */\nexport type AptosConnectMethod = (\n  ...args: AptosConnectInput\n) => Promise<UserResponse<AptosConnectOutput>>\n\n/** TODO: docs */\nexport type AptosConnectInput = [silent?: boolean, networkInfo?: NetworkInfo]\n/** TODO: docs */\nexport type AptosConnectOutput = AccountInfo\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { NetworkInfo } from '../misc'\n\n/** Version of the feature. */\nexport type AptosGetNetworkVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosGetNetworkNamespace = 'aptos:network'\n/** TODO: docs */\nexport type AptosGetNetworkFeature = {\n  /** Namespace for the feature. */\n  [AptosGetNetworkNamespace]: {\n    /** Version of the feature API. */\n    version: AptosGetNetworkVersion\n    network: AptosGetNetworkMethod\n  }\n}\n/** TODO: docs */\nexport type AptosGetNetworkMethod = () => Promise<AptosGetNetworkOutput>\n/** TODO: docs */\nexport type AptosGetNetworkOutput = NetworkInfo\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountInfo } from '../AccountInfo'\n\n/** Version of the feature. */\nexport type AptosOnAccountChangeVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosOnAccountChangeNamespace = 'aptos:onAccountChange'\n/** TODO: docs */\nexport type AptosOnAccountChangeFeature = {\n  /** Namespace for the feature. */\n  [AptosOnAccountChangeNamespace]: {\n    /** Version of the feature API. */\n    version: AptosOnAccountChangeVersion\n    onAccountChange: AptosOnAccountChangeMethod\n  }\n}\n/** TODO: docs */\nexport type AptosOnAccountChangeMethod = (input: AptosOnAccountChangeInput) => Promise<void>\n/** TODO: docs */\nexport type AptosOnAccountChangeInput = (newAccount: AccountInfo) => void\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { NetworkInfo } from '../misc'\n\n/** Version of the feature. */\nexport type AptosOnNetworkChangeVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosOnNetworkChangeNamespace = 'aptos:onNetworkChange'\n/** TODO: docs */\nexport type AptosOnNetworkChangeFeature = {\n  /** Namespace for the feature. */\n  [AptosOnNetworkChangeNamespace]: {\n    /** Version of the feature API. */\n    version: AptosOnNetworkChangeVersion\n    onNetworkChange: AptosOnNetworkChangeMethod\n  }\n}\n/** TODO: docs */\nexport type AptosOnNetworkChangeMethod = (input: AptosOnNetworkChangeInput) => Promise<void>\n/** TODO: docs */\nexport type AptosOnNetworkChangeInput = (newNetwork: NetworkInfo) => void\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { NetworkInfo, UserResponse } from '../misc'\n\n/** Version of the feature. */\nexport type AptosChangeNetworkVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosChangeNetworkNamespace = 'aptos:changeNetwork'\n/** TODO: docs */\nexport type AptosChangeNetworkFeature = {\n  /** Namespace for the feature. */\n  [AptosChangeNetworkNamespace]: {\n    /** Version of the feature API. */\n    version: AptosChangeNetworkVersion\n    changeNetwork: AptosChangeNetworkMethod\n  }\n}\n\n/** TODO: docs */\nexport type AptosChangeNetworkMethod = (\n  input: AptosChangeNetworkInput\n) => Promise<UserResponse<AptosChangeNetworkOutput>>\n/** TODO: docs */\nexport type AptosChangeNetworkInput = NetworkInfo\n\n/** TODO: docs */\nexport interface AptosChangeNetworkOutput {\n  success: boolean\n  reason?: string\n}\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/** Version of the feature. */\nexport type AptosDisconnectVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosDisconnectNamespace = 'aptos:disconnect'\n/** TODO: docs */\nexport type AptosDisconnectFeature = {\n  /** Namespace for the feature. */\n  [AptosDisconnectNamespace]: {\n    /** Version of the feature API. */\n    version: AptosDisconnectVersion\n    disconnect: AptosDisconnectMethod\n  }\n}\n/** TODO: docs */\nexport type AptosDisconnectMethod = () => Promise<void>\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnyRawTransaction, AccountAuthenticator } from '@aptos-labs/ts-sdk'\nimport { UserResponse } from '../misc'\n\n/** Version of the feature. */\nexport type AptosSignTransactionVersion = '1.0.0'\n/** Name of the feature. */\nexport const AptosSignTransactionNamespace = 'aptos:signTransaction'\n/**\n * A Wallet Standard feature for signing a Aptos transaction, and returning the\n * account authenticator.\n */\nexport type AptosSignTransactionFeature = {\n  /** Namespace for the feature. */\n  [AptosSignTransactionNamespace]: {\n    /** Version of the feature API. */\n    version: AptosSignTransactionVersion\n    signTransaction: AptosSignTransactionMethod\n  }\n}\n/** TODO: docs */\nexport type AptosSignTransactionMethod = (\n  transaction: AnyRawTransaction,\n  asFeePayer?: boolean\n) => Promise<UserResponse<AptosSignTransactionOutput>>\n\n/** Output of signing transactions. */\nexport type AptosSignTransactionOutput = AccountAuthenticator\n","// Copyright © Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, PublicKey, Network } from '@aptos-labs/ts-sdk'\n\n/** TODO: docs */\nexport type TransactionHash = `0x${string}`\n\n/** TODO: docs */\nexport interface NetworkInfo {\n  name: Network // Name of the network.\n  chainId: number // Chain ID of the network.\n  url?: string // RPC URL of the network.\n}\n\nexport enum UserResponseStatus {\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected'\n}\n\nexport interface UserApproval<TResponseArgs> {\n  status: UserResponseStatus.APPROVED\n  args: TResponseArgs\n}\n\nexport interface UserRejection {\n  status: UserResponseStatus.REJECTED\n}\n\nexport type UserResponse<TResponseArgs> = UserApproval<TResponseArgs> | UserRejection\n"]}