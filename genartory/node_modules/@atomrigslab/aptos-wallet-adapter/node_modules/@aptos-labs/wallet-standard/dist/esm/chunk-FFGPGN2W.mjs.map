{"version":3,"sources":["../../src/AccountInfo.ts"],"sourcesContent":["import {\n  AccountAddress, AccountAddressInput, AnyPublicKey,\n  Deserializer,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey, MultiKey,\n  PublicKey,\n  Serializable,\n  Serializer, SigningScheme\n} from '@aptos-labs/ts-sdk'\n\nexport interface AccountInfoInput {\n  address: AccountAddressInput\n  publicKey: PublicKey\n  ansName?: string\n}\n\nexport class AccountInfo extends Serializable {\n  readonly address: AccountAddress\n  readonly publicKey: PublicKey\n  readonly ansName?: string\n\n  constructor({ address, publicKey, ansName }: AccountInfoInput) {\n    super()\n    this.address = AccountAddress.from(address)\n    this.publicKey = publicKey\n    this.ansName = ansName\n  }\n\n  serialize(serializer: Serializer) {\n    this.address.serialize(serializer)\n    if (this.publicKey instanceof Ed25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.Ed25519)\n    } else if (this.publicKey instanceof MultiEd25519PublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519)\n    } else if (this.publicKey instanceof AnyPublicKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.SingleKey)\n    } else if (this.publicKey instanceof MultiKey) {\n      serializer.serializeU32AsUleb128(SigningScheme.MultiKey)\n    } else {\n      throw new Error('Unsupported public key')\n    }\n    this.publicKey.serialize(serializer)\n    serializer.serializeStr(this.ansName ?? '')\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const address = AccountAddress.deserialize(deserializer)\n    const variant = deserializer.deserializeUleb128AsU32()\n    let publicKey: PublicKey\n    switch (variant) {\n      case SigningScheme.Ed25519:\n        publicKey = Ed25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiEd25519:\n        publicKey = MultiEd25519PublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.SingleKey:\n        publicKey = AnyPublicKey.deserialize(deserializer)\n        break\n      case SigningScheme.MultiKey:\n        publicKey = MultiKey.deserialize(deserializer)\n        break\n      default:\n        throw new Error(`Unknown variant index for WrappedPublicKey: ${variant}`)\n    }\n    const ansName = deserializer.deserializeStr() || undefined\n    return new AccountInfo({ address, publicKey, ansName })\n  }\n}\n"],"mappings":"AAAA,OACE,kBAAAA,EAAqC,gBAAAC,EAErC,oBAAAC,EACA,yBAAAC,EAAuB,YAAAC,EAEvB,gBAAAC,EACY,iBAAAC,MACP,qBAQA,IAAMC,EAAN,MAAMC,UAAoBH,CAAa,CAK5C,YAAY,CAAE,QAAAI,EAAS,UAAAC,EAAW,QAAAC,CAAQ,EAAqB,CAC7D,MAAM,EACN,KAAK,QAAUX,EAAe,KAAKS,CAAO,EAC1C,KAAK,UAAYC,EACjB,KAAK,QAAUC,CACjB,CAEA,UAAUC,EAAwB,CAEhC,GADA,KAAK,QAAQ,UAAUA,CAAU,EAC7B,KAAK,qBAAqBV,EAC5BU,EAAW,sBAAsBN,EAAc,OAAO,UAC7C,KAAK,qBAAqBH,EACnCS,EAAW,sBAAsBN,EAAc,YAAY,UAClD,KAAK,qBAAqBL,EACnCW,EAAW,sBAAsBN,EAAc,SAAS,UAC/C,KAAK,qBAAqBF,EACnCQ,EAAW,sBAAsBN,EAAc,QAAQ,MAEvD,OAAM,IAAI,MAAM,wBAAwB,EAE1C,KAAK,UAAU,UAAUM,CAAU,EACnCA,EAAW,aAAa,KAAK,SAAW,EAAE,CAC5C,CAEA,OAAO,YAAYC,EAA4B,CAC7C,IAAMJ,EAAUT,EAAe,YAAYa,CAAY,EACjDC,EAAUD,EAAa,wBAAwB,EACjDH,EACJ,OAAQI,EAAS,CACf,KAAKR,EAAc,QACjBI,EAAYR,EAAiB,YAAYW,CAAY,EACrD,MACF,KAAKP,EAAc,aACjBI,EAAYP,EAAsB,YAAYU,CAAY,EAC1D,MACF,KAAKP,EAAc,UACjBI,EAAYT,EAAa,YAAYY,CAAY,EACjD,MACF,KAAKP,EAAc,SACjBI,EAAYN,EAAS,YAAYS,CAAY,EAC7C,MACF,QACE,MAAM,IAAI,MAAM,+CAA+CC,CAAO,EAAE,CAC5E,CACA,IAAMH,EAAUE,EAAa,eAAe,GAAK,OACjD,OAAO,IAAIL,EAAY,CAAE,QAAAC,EAAS,UAAAC,EAAW,QAAAC,CAAQ,CAAC,CACxD,CACF","names":["AccountAddress","AnyPublicKey","Ed25519PublicKey","MultiEd25519PublicKey","MultiKey","Serializable","SigningScheme","AccountInfo","_AccountInfo","address","publicKey","ansName","serializer","deserializer","variant"]}