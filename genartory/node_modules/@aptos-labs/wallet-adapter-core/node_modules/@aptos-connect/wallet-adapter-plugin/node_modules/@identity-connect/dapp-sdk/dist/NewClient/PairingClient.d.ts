import { AccountInfo } from '@aptos-connect/wallet-api';
import { FinalizedPairingData, NetworkName, SerializedDate, SigningRequestStatus, SigningRequestTypes } from '@identity-connect/api';
import { Ed25519KeyPair } from '@identity-connect/crypto';
import { type SignAndSubmitTransactionRequestArgs, type SignAndSubmitTransactionResponseArgs, SignMessageRequestArgs, type SignTransactionRequestArgs, type SignTransactionResponseArgs, type SignTransactionWithPayloadRequestArgs, type SignTransactionWithPayloadResponseArgs, type SignTransactionWithRawTxnRequestArgs, type SignTransactionWithRawTxnResponseArgs } from '@identity-connect/wallet-api';
import { CreateAxiosDefaults } from 'axios';
import { DappPairingData, DappStateAccessors } from './state';
import { CancelToken } from '../types';
export interface SignRequestOptions {
    cancelToken?: CancelToken;
    networkName?: NetworkName;
}
export type OnDisconnectListener = (address: string) => void;
export type OnDisconnectListenerCleanup = () => void;
export interface ICDappClientConfig {
    accessors?: DappStateAccessors;
    axiosConfig?: CreateAxiosDefaults;
    defaultNetworkName?: NetworkName;
    frontendBaseURL?: string;
}
export declare class ACPairingClient {
    private readonly accessors;
    private readonly defaultNetworkName;
    private readonly axiosInstance;
    private readonly initPromise?;
    constructor({ accessors, axiosConfig, defaultNetworkName, }?: ICDappClientConfig);
    private getPairing;
    private syncFirstPairing;
    private createSigningRequest;
    private getSigningRequest;
    private deletePairing;
    cancelSigningRequest(pairing: DappPairingData, id: string): Promise<{
        apiVersion: string;
        createdAt: string;
        id: string;
        networkName: string | null;
        pairing: {
            registeredDapp: {
                dappSpecificWalletAllowed: boolean;
                description: string | null;
                externalWalletPairingsAllowed: boolean;
                feePayerAllowed: boolean;
                hostname: string;
                iconUrl: string | null;
                id: string;
                name: string;
            };
        };
        pairingId: string;
        requestEnvelope: {
            encryptedPrivateMessage: {
                nonceB64: string;
                securedB64: string;
            };
            messageSignature: string;
            serializedPublicMessage: string;
        };
        requestType: SigningRequestTypes;
        responseEnvelope?: {
            encryptedPrivateMessage: {
                nonceB64: string;
                securedB64: string;
            };
            messageSignature: string;
            serializedPublicMessage: string;
        } | undefined;
        status: SigningRequestStatus;
    }>;
    private signRequest;
    /**
     * Requests a connection to an account (internally known as pairing).
     * @returns either the address of the connected account, or undefined if the
     * connection was cancelled.
     */
    connect({ publicKey, secretKey }: Ed25519KeyPair, finalizedPairing: SerializedDate<FinalizedPairingData>): Promise<void>;
    disconnect(address: string): Promise<void>;
    signMessage(address: string, args: SignMessageRequestArgs, options?: SignRequestOptions): Promise<import("@identity-connect/wallet-api").FullMessageParams & import("@identity-connect/wallet-api").FullMessageResult & {
        signature: string;
    }>;
    signTransaction(address: string, args: SignTransactionWithPayloadRequestArgs, options?: SignRequestOptions): Promise<SignTransactionWithPayloadResponseArgs>;
    signTransaction(address: string, args: SignTransactionWithRawTxnRequestArgs, options?: SignRequestOptions): Promise<SignTransactionWithRawTxnResponseArgs>;
    signTransaction(address: string, args: SignTransactionRequestArgs, options?: SignRequestOptions): Promise<SignTransactionResponseArgs>;
    signAndSubmitTransaction(address: string, args: SignAndSubmitTransactionRequestArgs, options?: SignRequestOptions): Promise<SignAndSubmitTransactionResponseArgs>;
    getConnectedAccounts(): Promise<AccountInfo[]>;
    private readonly onDisconnectListeners;
    onDisconnect(listener: OnDisconnectListener): OnDisconnectListenerCleanup;
}
//# sourceMappingURL=PairingClient.d.ts.map