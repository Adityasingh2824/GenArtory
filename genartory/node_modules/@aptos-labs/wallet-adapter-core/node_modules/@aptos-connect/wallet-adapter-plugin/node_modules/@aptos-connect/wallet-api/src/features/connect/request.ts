// Copyright Â© Aptos
// SPDX-License-Identifier: Apache-2.0

import { Deserializer, Serializer } from '@aptos-labs/ts-sdk';
import { DappInfo } from '../../shared';
import {
  deserializeWalletRequestWithArgs,
  SerializedWalletRequest,
  serializeWalletRequestWithArgs,
  WalletRequest,
} from '../../WalletRequest';

export interface ConnectRequest extends WalletRequest<ConnectRequest.RequestName, ConnectRequest.SupportedVersions> {
  args: ConnectRequest.Args;
}

export namespace ConnectRequest {
  export const name = 'connect' as const;
  export type RequestName = typeof name;

  export const supportedVersions = [1, 2] as const;
  export type SupportedVersions = (typeof supportedVersions)[number];
  export const currentVersion = 2 as const;
  export type CurrentVersion = typeof currentVersion;

  // region Args

  export type Args = {
    dappEd25519PublicKeyB64?: string;
    dappId?: string;
  };

  export function serializeArgs(serializer: Serializer, value: Args) {
    serializer.serializeOptionStr(value.dappId);
    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);
  }

  export function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {
    if (version === 1) {
      return {};
    }

    const dappId = deserializer.deserializeOptionStr();
    const dappEd25519PublicKeyB64 = deserializer.deserializeOptionStr();
    return { dappEd25519PublicKeyB64, dappId };
  }

  // endregion

  export function serialize(
    dappInfo: DappInfo,
    args: ConnectRequest.Args = {},
  ): SerializedWalletRequest<RequestName, CurrentVersion> {
    return serializeWalletRequestWithArgs({ args, dappInfo, name, version: currentVersion }, serializeArgs);
  }

  export function deserialize(request: SerializedWalletRequest<RequestName, SupportedVersions>): ConnectRequest {
    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));
  }

  export function isSerialized(
    request: SerializedWalletRequest,
  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {
    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);
  }
}
