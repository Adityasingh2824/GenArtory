{"version":3,"sources":["../src/serialization/bcsSerialization.ts","../src/serialization/jsonPayload.ts","../src/serialization/error.ts","../src/serialization/rawTxn.ts","../src/serialization/signAndSubmitTransactionRequestArgs.ts","../src/serialization/signTransactionRequestArgs.ts","../src/serialization/signTransactionResponseArgs.ts","../src/utils/makeFullMessage.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Hex, Serializable as BcsSerializableV2 } from '@aptos-labs/ts-sdk';\nimport { BCS } from 'aptos';\n\nexport type BcsSerializableV1 = { serialize(serializer: BCS.Serializer): void };\nexport type BcsDeserializableV1Class<T extends BcsSerializableV1> = {\n  deserialize(deserializer: BCS.Deserializer): T;\n};\nexport type BcsDeserializableV2Class<T extends BcsSerializableV2> = {\n  deserialize(deserializer: Deserializer): T;\n};\n\nfunction isBcsSerializableV1(value: any): value is BcsSerializableV1 {\n  return (value as BcsSerializableV1)?.serialize !== undefined;\n}\n\nfunction isBcsSerializableV2(value: any): value is BcsSerializableV2 {\n  return (\n    (value as BcsSerializableV2)?.serialize !== undefined &&\n    (value as BcsSerializableV2)?.bcsToBytes !== undefined &&\n    (value as BcsSerializableV2)?.bcsToHex !== undefined\n  );\n}\n\n/**\n * Check if a value is BCS serializable\n */\nexport function isBcsSerializable(value: any): value is BcsSerializableV1 | BcsSerializableV2 {\n  return isBcsSerializableV1(value) || isBcsSerializableV2(value);\n}\n\nexport function bcsSerialize(serializable: BcsSerializableV1 | BcsSerializableV2) {\n  if (isBcsSerializableV2(serializable)) {\n    return serializable.bcsToHex().toString();\n  }\n  const serializedValueBytes = BCS.bcsToBytes(serializable);\n  return Hex.fromHexInput(serializedValueBytes).toString();\n}\n\nexport function bcsDeserialize<T extends BcsSerializableV2>(\n  deserializableClass: BcsDeserializableV2Class<T>,\n  serializedValue: string,\n) {\n  const serializedValueBytes = Hex.fromHexString(serializedValue).toUint8Array();\n  const deserializer = new Deserializer(serializedValueBytes);\n  return deserializableClass.deserialize(deserializer);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Hex } from '@aptos-labs/ts-sdk';\nimport type { EntryFunctionPayloadResponse } from '@aptos-labs/ts-sdk';\nimport type { EntryFunctionJsonTransactionPayload, JsonTransactionPayload } from '../types';\nimport { UnexpectedValueError } from './error';\n\ninterface SerializedUint8ArrayArg {\n  type: 'Uint8Array';\n  value: string;\n}\n\nfunction isSerializedUint8Array(arg: any): arg is SerializedUint8ArrayArg {\n  return arg?.type === 'Uint8Array' && typeof arg?.value === 'string';\n}\n\nfunction serializeEntryFunctionArg(arg: any): any {\n  if (arg instanceof Uint8Array) {\n    return {\n      type: 'Uint8Array',\n      value: Hex.fromHexInput(arg).toString(),\n    };\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(serializeEntryFunctionArg);\n  }\n  return arg;\n}\n\nfunction deserializeEntryFunctionArg(arg: any): any {\n  if (isSerializedUint8Array(arg)) {\n    return Hex.fromHexInput(arg.value).toUint8Array();\n  }\n  if (Array.isArray(arg)) {\n    return arg.map(deserializeEntryFunctionArg);\n  }\n  return arg;\n}\n\nfunction serializeEntryFunctionPayload(payload: EntryFunctionPayloadResponse): EntryFunctionJsonTransactionPayload {\n  const normalizedArgs = payload.arguments.map(serializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: normalizedArgs,\n    type: 'entry_function_payload',\n  };\n}\n\nfunction deserializeEntryFunctionPayload(payload: EntryFunctionPayloadResponse): EntryFunctionJsonTransactionPayload {\n  const deserializedArgs = payload.arguments.map(deserializeEntryFunctionArg);\n  return {\n    ...payload,\n    arguments: deserializedArgs,\n    type: 'entry_function_payload',\n  };\n}\n\nexport function serializeJsonTransactionPayload(payload: JsonTransactionPayload): JsonTransactionPayload {\n  if (payload.type === 'entry_function_payload' || payload.type === undefined) {\n    return serializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === 'multisig_payload') {\n    const innerPayload =\n      payload.transaction_payload !== undefined\n        ? serializeEntryFunctionPayload(payload.transaction_payload)\n        : undefined;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeJsonTransactionPayload(payload: JsonTransactionPayload): JsonTransactionPayload {\n  if (payload.type === 'entry_function_payload' || payload.type === undefined) {\n    return deserializeEntryFunctionPayload(payload);\n  }\n  if (payload.type === 'multisig_payload') {\n    const innerPayload =\n      payload.transaction_payload !== undefined\n        ? deserializeEntryFunctionPayload(payload.transaction_payload)\n        : undefined;\n    return { ...payload, transaction_payload: innerPayload };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport class UnexpectedValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'UnexpectedValueError';\n    Object.setPrototypeOf(this, UnexpectedValueError.prototype);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  FeePayerRawTransaction,\n  MultiAgentRawTransaction,\n  RawTransaction,\n  RawTransactionWithData,\n} from '@aptos-labs/ts-sdk';\nimport { TxnBuilderTypes } from 'aptos';\nimport { bcsDeserialize, bcsSerialize } from './bcsSerialization';\nimport { UnexpectedValueError } from './error';\n\nexport type SerializableRawTransaction = RawTransaction | FeePayerRawTransaction | MultiAgentRawTransaction;\n\nexport type SerializableRawTransactionV1 =\n  | TxnBuilderTypes.RawTransaction\n  | TxnBuilderTypes.FeePayerRawTransaction\n  | TxnBuilderTypes.MultiAgentRawTransaction;\n\nexport interface SerializedSimpleRawTransaction {\n  type: 'raw_txn';\n  value: string;\n}\n\nexport interface SerializedFeePayerRawTransaction {\n  type: 'fee_payer_raw_txn';\n  value: string;\n}\n\nexport interface SerializedMultiAgentRawTransaction {\n  type: 'multi_agent_raw_txn';\n  value: string;\n}\n\nexport type SerializedRawTransaction =\n  | SerializedSimpleRawTransaction\n  | SerializedFeePayerRawTransaction\n  | SerializedMultiAgentRawTransaction;\n\nexport function serializeRawTransaction(\n  rawTxn: RawTransaction | TxnBuilderTypes.RawTransaction,\n): SerializedSimpleRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: FeePayerRawTransaction | TxnBuilderTypes.FeePayerRawTransaction,\n): SerializedFeePayerRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: MultiAgentRawTransaction | TxnBuilderTypes.MultiAgentRawTransaction,\n): SerializedMultiAgentRawTransaction;\nexport function serializeRawTransaction(\n  rawTxn: SerializableRawTransaction | SerializableRawTransactionV1,\n): SerializedRawTransaction;\n\nexport function serializeRawTransaction(\n  rawTxn: SerializableRawTransaction | SerializableRawTransactionV1,\n): SerializedRawTransaction {\n  const value = bcsSerialize(rawTxn);\n  if ('fee_payer_address' in rawTxn) {\n    return { type: 'fee_payer_raw_txn', value };\n  }\n  if ('secondary_signer_addresses' in rawTxn) {\n    return { type: 'multi_agent_raw_txn', value };\n  }\n  if ('chain_id' in rawTxn) {\n    return { type: 'raw_txn', value };\n  }\n  throw new UnexpectedValueError('Invalid raw transaction type');\n}\n\nexport function deserializeRawTransaction(serialized: SerializedSimpleRawTransaction): RawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedFeePayerRawTransaction): FeePayerRawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedMultiAgentRawTransaction): MultiAgentRawTransaction;\nexport function deserializeRawTransaction(serialized: SerializedRawTransaction): SerializableRawTransaction;\n\nexport function deserializeRawTransaction(serialized: SerializedRawTransaction): SerializableRawTransaction {\n  switch (serialized.type) {\n    case 'raw_txn':\n      return bcsDeserialize(RawTransaction, serialized.value);\n    case 'fee_payer_raw_txn':\n      return bcsDeserialize(RawTransactionWithData, serialized.value) as FeePayerRawTransaction;\n    case 'multi_agent_raw_txn':\n      return bcsDeserialize(RawTransactionWithData, serialized.value) as MultiAgentRawTransaction;\n    default:\n      throw new UnexpectedValueError('Invalid raw transaction type');\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAuthenticator, TransactionPayload } from '@aptos-labs/ts-sdk';\nimport type {\n  SignAndSubmitTransactionRequestArgs,\n  SignAndSubmitTransactionRequestV1Args,\n  SignAndSubmitTransactionWithFeePayerRawTxnRequestArgs,\n  SignAndSubmitTransactionWithPayloadRequestArgs,\n  SignAndSubmitTransactionWithRawTxnRequestArgs,\n} from '../types';\nimport { JsonTransactionPayload, TransactionOptions } from '../types';\nimport { bcsDeserialize, bcsSerialize, isBcsSerializable } from './bcsSerialization';\n\nimport { UnexpectedValueError } from './error';\nimport { deserializeJsonTransactionPayload, serializeJsonTransactionPayload } from './jsonPayload';\nimport {\n  deserializeRawTransaction,\n  type SerializedFeePayerRawTransaction,\n  type SerializedSimpleRawTransaction,\n  serializeRawTransaction,\n} from './rawTxn';\n\nexport interface SerializedSignAndSubmitTransactionWithPayloadRequestArgs {\n  options?: TransactionOptions;\n  payload: JsonTransactionPayload | string;\n}\n\nexport interface SerializedSignAndSubmitTransactionWithRawTxnRequestArgs {\n  rawTxn: SerializedSimpleRawTransaction;\n}\n\nexport interface SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs {\n  feePayerAuthenticator: string;\n  rawTxn: SerializedFeePayerRawTransaction;\n}\n\nexport type SerializedSignAndSubmitTransactionRequestArgs =\n  | SerializedSignAndSubmitTransactionWithPayloadRequestArgs\n  | SerializedSignAndSubmitTransactionWithRawTxnRequestArgs\n  | SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs;\n\nexport function serializeSignAndSubmitTransactionRequestArgs(\n  args: SignAndSubmitTransactionRequestArgs | SignAndSubmitTransactionRequestV1Args,\n): SerializedSignAndSubmitTransactionRequestArgs {\n  if ('payload' in args) {\n    const serializedPayload = isBcsSerializable(args.payload)\n      ? bcsSerialize(args.payload)\n      : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if ('feePayerAuthenticator' in args) {\n    return {\n      feePayerAuthenticator: bcsSerialize(args.feePayerAuthenticator),\n      rawTxn: serializeRawTransaction(args.rawTxn),\n    };\n  }\n  if ('rawTxn' in args) {\n    return { rawTxn: serializeRawTransaction(args.rawTxn) };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithPayloadRequestArgs,\n): SignAndSubmitTransactionWithPayloadRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithRawTxnRequestArgs,\n): SignAndSubmitTransactionWithRawTxnRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionWithFeePayerRawTxnRequestArgs,\n): SignAndSubmitTransactionWithFeePayerRawTxnRequestArgs;\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionRequestArgs,\n): SignAndSubmitTransactionRequestArgs;\n\nexport function deserializeSignAndSubmitTransactionRequestArgs(\n  args: SerializedSignAndSubmitTransactionRequestArgs,\n): SignAndSubmitTransactionRequestArgs {\n  if ('payload' in args) {\n    const payload =\n      typeof args.payload === 'string'\n        ? bcsDeserialize(TransactionPayload, args.payload)\n        : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if ('feePayerAuthenticator' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    const feePayerAuthenticator = bcsDeserialize(AccountAuthenticator, args.feePayerAuthenticator);\n    return { feePayerAuthenticator, rawTxn: deserializedRawTxn };\n  }\n  if ('rawTxn' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TransactionPayload } from '@aptos-labs/ts-sdk';\nimport type {\n  JsonTransactionPayload,\n  SignTransactionRequestArgs,\n  SignTransactionRequestV1Args,\n  SignTransactionWithPayloadRequestArgs,\n  SignTransactionWithRawTxnRequestArgs,\n  TransactionOptions,\n} from '../types';\nimport { bcsDeserialize, bcsSerialize, isBcsSerializable } from './bcsSerialization';\nimport { UnexpectedValueError } from './error';\nimport { deserializeJsonTransactionPayload, serializeJsonTransactionPayload } from './jsonPayload';\nimport type { SerializedRawTransaction } from './rawTxn';\nimport { deserializeRawTransaction, serializeRawTransaction } from './rawTxn';\n\nexport interface SerializedSignTransactionWithPayloadRequestArgs {\n  options?: TransactionOptions;\n  payload: JsonTransactionPayload | string;\n}\n\nexport interface SerializedSignTransactionWithRawTxnRequestArgs {\n  rawTxn: SerializedRawTransaction;\n}\n\nexport type SerializedSignTransactionRequestArgs =\n  | SerializedSignTransactionWithPayloadRequestArgs\n  | SerializedSignTransactionWithRawTxnRequestArgs;\n\nexport function serializeSignTransactionRequestArgs(\n  args: SignTransactionRequestArgs | SignTransactionRequestV1Args,\n): SerializedSignTransactionRequestArgs {\n  if ('payload' in args) {\n    const serializedPayload = isBcsSerializable(args.payload)\n      ? bcsSerialize(args.payload)\n      : serializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload: serializedPayload };\n  }\n  if ('rawTxn' in args) {\n    const serializedRawTxn = serializeRawTransaction(args.rawTxn);\n    return { rawTxn: serializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionWithPayloadRequestArgs,\n): SignTransactionWithPayloadRequestArgs;\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionWithRawTxnRequestArgs,\n): SignTransactionWithRawTxnRequestArgs;\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionRequestArgs,\n): SignTransactionRequestArgs;\n\nexport function deserializeSignTransactionRequestArgs(\n  args: SerializedSignTransactionRequestArgs,\n): SignTransactionRequestArgs {\n  if ('payload' in args) {\n    const payload =\n      typeof args.payload === 'string'\n        ? bcsDeserialize(TransactionPayload, args.payload)\n        : deserializeJsonTransactionPayload(args.payload);\n    return { options: args.options, payload };\n  }\n  if ('rawTxn' in args) {\n    const deserializedRawTxn = deserializeRawTransaction(args.rawTxn);\n    return { rawTxn: deserializedRawTxn };\n  }\n  throw new UnexpectedValueError();\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAuthenticator, RawTransaction } from '@aptos-labs/ts-sdk';\nimport type { SignTransactionResponseArgs } from '../types';\nimport { bcsDeserialize, bcsSerialize } from './bcsSerialization';\n\nexport interface SerializedSignTransactionWithPayloadResponseArgs {\n  accountAuthenticator: string;\n  rawTxn: string;\n}\n\nexport interface SerializedSignTransactionWithRawTxnResponseArgs {\n  accountAuthenticator: string;\n}\n\nexport type SerializedSignTransactionResponseArgs =\n  | SerializedSignTransactionWithPayloadResponseArgs\n  | SerializedSignTransactionWithRawTxnResponseArgs;\n\nexport function serializeSignTransactionResponseArgs(\n  args: SignTransactionResponseArgs,\n): SerializedSignTransactionResponseArgs {\n  const accountAuthenticator = bcsSerialize(args.accountAuthenticator);\n  if ('rawTxn' in args) {\n    const rawTxn = bcsSerialize(args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\n\nexport function deserializeSignTransactionResponseArgs(\n  args: SerializedSignTransactionResponseArgs,\n): SignTransactionResponseArgs {\n  const accountAuthenticator = bcsDeserialize(AccountAuthenticator, args.accountAuthenticator);\n  if ('rawTxn' in args) {\n    const rawTxn = bcsDeserialize(RawTransaction, args.rawTxn);\n    return { accountAuthenticator, rawTxn };\n  }\n  return { accountAuthenticator };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { FullMessageFlags, FullMessageParams, FullMessageResult } from '../types';\n\nconst prefix = 'APTOS';\n\nexport function makeFullMessage(params: FullMessageParams, flags: FullMessageFlags): FullMessageResult {\n  let fullMessage = prefix;\n  if (flags.address) {\n    fullMessage += `\\naddress: ${params.address}`;\n  }\n  if (flags.application) {\n    fullMessage += `\\napplication: ${params.application}`;\n  }\n  if (flags.chainId) {\n    fullMessage += `\\nchainId: ${params.chainId}`;\n  }\n\n  fullMessage += `\\nmessage: ${params.message}`;\n  fullMessage += `\\nnonce: ${params.nonce}`;\n\n  return {\n    fullMessage,\n    prefix,\n  };\n}\n"],"mappings":"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","names":["Hex","Hex","TransactionPayload","TransactionPayload","AccountAuthenticator","RawTransaction","AccountAuthenticator","RawTransaction"]}