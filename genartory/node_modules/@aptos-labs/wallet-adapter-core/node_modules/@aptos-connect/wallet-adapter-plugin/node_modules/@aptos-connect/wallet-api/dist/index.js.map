{"version":3,"sources":["../src/index.ts","../src/base64.ts","../src/helpers.ts","../src/WalletRequest.ts","../src/shared/AccountAuthenticatorInput.ts","../src/shared/AccountInfo.ts","../src/shared/PublicKey.ts","../src/shared/AccountInput.ts","../src/shared/DappInfo.ts","../src/shared/EntryFunctionArgument.ts","../src/shared/Signature.ts","../src/shared/TransactionPayloadInput.ts","../src/features/connect/request.ts","../src/UserResponse.ts","../src/WalletResponse.ts","../src/features/connect/response.ts","../src/features/disconnect/request.ts","../src/features/disconnect/response.ts","../src/features/getConnectedAccounts/request.ts","../src/features/getConnectedAccounts/response.ts","../src/features/isConnected/request.ts","../src/features/isConnected/response.ts","../src/features/signAndSubmitTransaction/request.ts","../src/features/signAndSubmitTransaction/response.ts","../src/features/signMessage/request.ts","../src/features/signMessage/response.ts","../src/features/signTransaction/request.ts","../src/features/signTransaction/response.ts","../src/messages/common.ts","../src/messages/background.ts","../src/messages/prompt.ts"],"sourcesContent":["// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from './base64';\nexport * from './helpers';\nexport * from './features';\nexport * from './messages';\nexport * from './shared';\nexport * from './UserResponse';\nexport * from './WalletResponse';\nexport * from './WalletRequest';\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport function base64ToBytes(base64: string) {\n  const binaryString = atob(base64);\n  return Uint8Array.from(binaryString, (m) => m.charCodeAt(0));\n}\n\nexport function bytesToBase64(bytes: Uint8Array) {\n  const binaryString = String.fromCharCode(...bytes);\n  return btoa(binaryString);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Network, NetworkToChainId, Serializer } from '@aptos-labs/ts-sdk';\n\nexport type SerializeFn<T> = (serializer: Serializer, value: T) => void;\nexport type DeserializeFn<T> = (deserializer: Deserializer) => T;\n\nexport function chainIdToNetwork(chainId: number): Network {\n  switch (chainId) {\n    case NetworkToChainId.mainnet:\n      return Network.MAINNET;\n    case NetworkToChainId.testnet:\n      return Network.TESTNET;\n    default:\n      // TODO: fetch Devnet's chain id and compare, otherwise throw error\n      return Network.DEVNET;\n  }\n}\n\nexport function isSupportedNetwork(network: string): network is Network {\n  return [Network.MAINNET, Network.TESTNET, Network.DEVNET].includes(network as Network);\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo, deserializeDappInfo, serializeDappInfo } from './shared';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface WalletRequest<RequestName extends string, Version extends number> {\n  dappInfo: DappInfo;\n  name: RequestName;\n  version: Version;\n}\n\nexport interface WalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>\n  extends WalletRequest<RequestName, Version> {\n  args: TArgs;\n}\n\nexport interface SerializedWalletRequest<RequestName extends string = string, Version extends number = number> {\n  data: Uint8Array;\n  name: RequestName;\n  version: Version;\n}\n\nexport function serializeWalletRequest<RequestName extends string, Version extends number>({\n  dappInfo,\n  name,\n  version,\n}: WalletRequest<RequestName, Version>): SerializedWalletRequest<RequestName, Version> {\n  const serializer = new Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\n\nexport function deserializeWalletRequest<RequestName extends string, Version extends number>({\n  data,\n  name,\n  version,\n}: SerializedWalletRequest<RequestName, Version>): WalletRequest<RequestName, Version> {\n  const deserializer = new Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  return { dappInfo, name, version };\n}\n\nexport function serializeWalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>(\n  { args, dappInfo, name, version }: WalletRequestWithArgs<RequestName, Version, TArgs>,\n  serializeArgsFn: SerializeFn<TArgs>,\n): SerializedWalletRequest<RequestName, Version> {\n  const serializer = new Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  serializeArgsFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\n\nexport function deserializeWalletRequestWithArgs<RequestName extends string, Version extends number, TArgs>(\n  { data, name, version }: SerializedWalletRequest<RequestName, Version>,\n  deserializeArgsFn: DeserializeFn<TArgs>,\n): WalletRequestWithArgs<RequestName, Version, TArgs> {\n  const deserializer = new Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  const args = deserializeArgsFn(deserializer);\n  return { args, dappInfo, name, version };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, AccountAuthenticator, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nexport interface AccountAuthenticatorInput {\n  address: AccountAddress;\n  authenticator: AccountAuthenticator;\n}\n\nexport function serializeAccountAuthenticatorInput(serializer: Serializer, value: AccountAuthenticatorInput) {\n  serializer.serialize(value.address);\n  serializer.serialize(value.authenticator);\n}\n\nexport function deserializeAccountAuthenticatorInput(deserializer: Deserializer): AccountAuthenticatorInput {\n  const address = deserializer.deserialize(AccountAddress);\n  const authenticator = deserializer.deserialize(AccountAuthenticator);\n  return { address, authenticator };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, Deserializer, PublicKey, Serializer } from '@aptos-labs/ts-sdk';\nimport { bytesToBase64 } from '../base64';\nimport { deserializePublicKey, serializePublicKey } from './PublicKey';\n\nexport interface AccountInfo {\n  address: AccountAddress;\n  name?: string;\n  publicKey: PublicKey;\n}\n\nexport function serializeAccountInfo(serializer: Serializer, value: AccountInfo) {\n  serializer.serialize(value.address);\n  serializePublicKey(serializer, value.publicKey);\n  serializer.serializeStr(value.name ?? '');\n}\n\nexport function deserializeAccountInfo(deserializer: Deserializer): AccountInfo {\n  const address = deserializer.deserialize(AccountAddress);\n  const publicKey = deserializePublicKey(deserializer);\n  const name = deserializer.deserializeStr();\n  return {\n    address,\n    publicKey,\n    ...(name.length > 0 ? { name } : undefined),\n  };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnyPublicKey,\n  Deserializer,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey,\n  MultiKey,\n  PublicKey,\n  Serializer,\n  SigningScheme,\n} from '@aptos-labs/ts-sdk';\n\nexport function serializePublicKey(serializer: Serializer, value: PublicKey) {\n  if (value instanceof Ed25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.Ed25519);\n  } else if (value instanceof MultiEd25519PublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519);\n  } else if (value instanceof AnyPublicKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.SingleKey);\n  } else if (value instanceof MultiKey) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiKey);\n  } else {\n    throw new Error('Unexpected public key type');\n  }\n  serializer.serialize(value);\n}\n\nexport function deserializePublicKey(deserializer: Deserializer): PublicKey {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme.Ed25519:\n      return deserializer.deserialize(Ed25519PublicKey);\n    case SigningScheme.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519PublicKey);\n    case SigningScheme.SingleKey:\n      return deserializer.deserialize(AnyPublicKey);\n    case SigningScheme.MultiKey:\n      return deserializer.deserialize(MultiKey);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AccountAddress, Deserializer, PublicKey, Serializer } from '@aptos-labs/ts-sdk';\nimport { deserializePublicKey, serializePublicKey } from './PublicKey';\n\nexport interface AccountInput {\n  address: AccountAddress;\n  publicKey?: PublicKey;\n}\n\nexport function serializeAccountInput(serializer: Serializer, value: AccountInput) {\n  serializer.serialize(value.address);\n  serializer.serializeBool(value.publicKey !== undefined);\n  if (value.publicKey) {\n    serializePublicKey(serializer, value.publicKey);\n  }\n}\n\nexport function deserializeAccountInput(deserializer: Deserializer): AccountInput {\n  const address = deserializer.deserialize(AccountAddress);\n  const hasPublicKey = deserializer.deserializeBool();\n  const publicKey = hasPublicKey ? deserializePublicKey(deserializer) : undefined;\n  return { address, publicKey };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\n\nexport interface DappInfo {\n  domain: string;\n  imageURI?: string;\n  name: string;\n}\n\nexport function serializeDappInfo(serializer: Serializer, value: DappInfo) {\n  serializer.serializeStr(value.domain);\n  serializer.serializeStr(value.name);\n  serializer.serializeBool(value.imageURI !== undefined);\n  if (value.imageURI !== undefined) {\n    serializer.serializeStr(value.imageURI);\n  }\n}\n\nexport function deserializeDappInfo(deserializer: Deserializer): DappInfo {\n  const domain = deserializer.deserializeStr();\n  const name = deserializer.deserializeStr();\n  const hasImageUri = deserializer.deserializeBool();\n  const imageURI = hasImageUri ? deserializer.deserializeStr() : undefined;\n  return { domain, imageURI, name };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  Deserializer,\n  EntryFunctionArgumentTypes,\n  FixedBytes,\n  Serializer,\n  SimpleEntryFunctionArgumentTypes,\n} from '@aptos-labs/ts-sdk';\n\nexport type EntryFunctionArgument = EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes;\n\n/* eslint-disable @typescript-eslint/no-shadow */\nexport enum EntryFunctionArgumentVariant {\n  Undefined,\n  Array,\n  String,\n  Uint8Array,\n  AccountAddress,\n  FixedBytes,\n}\n\n/* eslint-enable @typescript-eslint/no-shadow */\n\nexport function serializeEntryFunctionArgument(serializer: Serializer, argument: EntryFunctionArgument) {\n  // undefined | null -> undefined\n  if (argument === undefined || argument === null) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Undefined);\n    return;\n  }\n\n  // Array -> Array\n  if (Array.isArray(argument)) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Array);\n    serializer.serializeU32AsUleb128(argument.length);\n    for (const subArgument of argument) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n\n  // boolean | number | bigint | string -> string\n  if (\n    typeof argument === 'string' ||\n    typeof argument === 'number' ||\n    typeof argument === 'boolean' ||\n    typeof argument === 'bigint'\n  ) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.String);\n    serializer.serializeStr(argument.toString());\n    return;\n  }\n\n  // Uint8Array -> Uint8Array\n  if (argument instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Uint8Array);\n    serializer.serializeBytes(argument);\n    return;\n  }\n\n  // ArrayBuffer -> Uint8Array\n  if (argument instanceof ArrayBuffer) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Uint8Array);\n    serializer.serializeBytes(new Uint8Array(argument));\n    return;\n  }\n\n  // MoveVector -> Array\n  if ('values' in argument) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Array);\n    serializer.serializeU32AsUleb128(argument.values.length);\n    for (const subArgument of argument.values) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n\n  // AccountAddress -> AccountAddress\n  if ('data' in argument) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.AccountAddress);\n    serializer.serialize(argument);\n    return;\n  }\n\n  // Empty MoveOption -> undefined\n  if (argument.value === undefined) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.Undefined);\n    serializer.serialize(argument);\n    return;\n  }\n\n  // FixedBytes -> FixedBytes\n  if (argument.value instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.FixedBytes);\n    serializer.serializeBytes(argument.value);\n    return;\n  }\n\n  // Bool | U8 | U16 | U32 | U64 | U128 | U256 | MoveString -> string\n  serializer.serializeU32AsUleb128(EntryFunctionArgumentVariant.String);\n  serializer.serializeStr(argument.value.toString());\n}\n\nexport function deserializeEntryFunctionArgument(deserializer: Deserializer): EntryFunctionArgument {\n  const variant = deserializer.deserializeUleb128AsU32() as EntryFunctionArgumentVariant;\n\n  switch (variant) {\n    // undefined | null | empty MoveOption\n    case EntryFunctionArgumentVariant.Undefined: {\n      return undefined;\n    }\n    // Array | MoveVector\n    case EntryFunctionArgumentVariant.Array: {\n      const length = deserializer.deserializeUleb128AsU32();\n      const args: (EntryFunctionArgumentTypes | SimpleEntryFunctionArgumentTypes)[] = [];\n      for (let i = 0; i < length; i += 1) {\n        const argument = deserializeEntryFunctionArgument(deserializer);\n        args.push(argument);\n      }\n      return args;\n    }\n    // Uint8Array | ArrayBuffer | FixedBytes\n    case EntryFunctionArgumentVariant.Uint8Array: {\n      return deserializer.deserializeBytes();\n    }\n    // AccountAddress\n    case EntryFunctionArgumentVariant.AccountAddress: {\n      return deserializer.deserialize(AccountAddress);\n    }\n    // Bool | U8 | U16 | U32 | U64 | U128 | U256 | MoveString\n    case EntryFunctionArgumentVariant.String: {\n      return deserializer.deserializeStr();\n    }\n    // FixedBytes (custom serialization)\n    case EntryFunctionArgumentVariant.FixedBytes: {\n      const bytes = deserializer.deserializeBytes();\n      return new FixedBytes(bytes);\n    }\n    default: {\n      throw new Error('Unexpected variant');\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AnySignature,\n  Deserializer,\n  Ed25519Signature,\n  MultiEd25519Signature,\n  // This type got renamed in the zeta branch, commenting out until it's synced with main\n  // MultiSignature,\n  Serializer,\n  Signature,\n  SigningScheme,\n} from '@aptos-labs/ts-sdk';\n\nexport function serializeSignature(serializer: Serializer, value: Signature) {\n  if (value instanceof Ed25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme.Ed25519);\n  } else if (value instanceof MultiEd25519Signature) {\n    serializer.serializeU32AsUleb128(SigningScheme.MultiEd25519);\n  } else if (value instanceof AnySignature) {\n    serializer.serializeU32AsUleb128(SigningScheme.SingleKey);\n    // } else if (value instanceof MultiSignature) {\n    //   serializer.serializeU32AsUleb128(SigningScheme.MultiKey);\n  } else {\n    throw new Error('Unexpected signature type');\n  }\n  serializer.serialize(value);\n}\n\nexport function deserializeSignature(deserializer: Deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case SigningScheme.Ed25519:\n      return deserializer.deserialize(Ed25519Signature);\n    case SigningScheme.MultiEd25519:\n      return deserializer.deserialize(MultiEd25519Signature);\n    case SigningScheme.SingleKey:\n      return deserializer.deserialize(AnySignature);\n    // case SigningScheme.MultiKey:\n    //   return deserializer.deserialize(MultiSignature);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  deserializeFromScriptArgument,\n  Deserializer,\n  Hex,\n  InputGenerateTransactionPayloadData,\n  MoveFunctionId,\n  parseTypeTag,\n  ScriptFunctionArgumentTypes,\n  Serializer,\n  TypeArgument,\n  TypeTag,\n} from '@aptos-labs/ts-sdk';\nimport {\n  deserializeEntryFunctionArgument,\n  EntryFunctionArgument,\n  serializeEntryFunctionArgument,\n} from './EntryFunctionArgument';\n\nexport enum TransactionPayloadInputVariant {\n  EntryFunction,\n  Script,\n  Multisig,\n}\n\n// region Utils\n\nfunction serializeTypeArguments(serializer: Serializer, typeArguments: TypeArgument[]) {\n  serializer.serializeU32AsUleb128(typeArguments.length);\n  for (const typeArgument of typeArguments) {\n    const typeTag =\n      typeof typeArgument === 'string' ? parseTypeTag(typeArgument, { allowGenerics: true }) : typeArgument;\n    serializer.serialize(typeTag);\n  }\n}\n\nfunction deserializeTypeArguments(deserializer: Deserializer) {\n  const typeArguments: TypeTag[] = [];\n  const typeArgumentsLength = deserializer.deserializeUleb128AsU32();\n  for (let i = 0; i < typeArgumentsLength; i += 1) {\n    const typeTag = deserializer.deserialize(TypeTag);\n    typeArguments.push(typeTag);\n  }\n  return typeArguments;\n}\n\nfunction serializeEntryFunctionArguments(serializer: Serializer, functionArguments: EntryFunctionArgument[]) {\n  serializer.serializeU32AsUleb128(functionArguments.length);\n  for (const functionArgument of functionArguments) {\n    serializeEntryFunctionArgument(serializer, functionArgument);\n  }\n}\n\nfunction deserializeEntryFunctionArguments(deserializer: Deserializer) {\n  const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n  const functionArguments: EntryFunctionArgument[] = [];\n  for (let i = 0; i < functionArgumentsLength; i += 1) {\n    const functionArgument = deserializeEntryFunctionArgument(deserializer);\n    functionArguments.push(functionArgument);\n  }\n  return functionArguments;\n}\n\n// endregion\n\nexport function serializeTransactionPayloadInput(serializer: Serializer, value: InputGenerateTransactionPayloadData) {\n  if ('multisigAddress' in value) {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.Multisig);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    const multisigAddress = AccountAddress.from(value.multisigAddress);\n    serializer.serialize(multisigAddress);\n  } else if ('function' in value) {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.EntryFunction);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    // TODO: possibly serialize ABI?\n  } else {\n    serializer.serializeU32AsUleb128(TransactionPayloadInputVariant.Script);\n    const bytecode = Hex.fromHexInput(value.bytecode);\n    serializer.serializeBytes(bytecode.toUint8Array());\n    serializer.serializeU32AsUleb128(value.functionArguments.length);\n    for (const argument of value.functionArguments) {\n      argument.serializeForScriptFunction(serializer);\n    }\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  }\n}\n\nexport function deserializeTransactionPayloadInput(deserializer: Deserializer): InputGenerateTransactionPayloadData {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case TransactionPayloadInputVariant.Multisig: {\n      const functionId = deserializer.deserializeStr() as MoveFunctionId;\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      const multisigAddress = deserializer.deserialize(AccountAddress);\n      return {\n        function: functionId,\n        functionArguments,\n        multisigAddress,\n        typeArguments,\n      };\n    }\n    case TransactionPayloadInputVariant.EntryFunction: {\n      const functionId = deserializer.deserializeStr() as MoveFunctionId;\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        function: functionId,\n        functionArguments,\n        typeArguments,\n      };\n    }\n    case TransactionPayloadInputVariant.Script: {\n      const bytecode = deserializer.deserializeBytes();\n      const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n      const functionArguments: ScriptFunctionArgumentTypes[] = [];\n      for (let i = 0; i < functionArgumentsLength; i += 1) {\n        const argument = deserializeFromScriptArgument(deserializer);\n        functionArguments.push(argument as ScriptFunctionArgumentTypes);\n      }\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        bytecode,\n        functionArguments,\n        typeArguments,\n      };\n    }\n    default: {\n      throw new Error('Unexpected variant');\n    }\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface ConnectRequest extends WalletRequest<ConnectRequest.RequestName, ConnectRequest.SupportedVersions> {\n  args: ConnectRequest.Args;\n}\n\nexport namespace ConnectRequest {\n  export const name = 'connect' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 2 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export type Args = {\n    dappEd25519PublicKeyB64?: string;\n    dappId?: string;\n  };\n\n  export function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeOptionStr(value.dappId);\n    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);\n  }\n\n  export function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    if (version === 1) {\n      return {};\n    }\n\n    const dappId = deserializer.deserializeOptionStr();\n    const dappEd25519PublicKeyB64 = deserializer.deserializeOptionStr();\n    return { dappEd25519PublicKeyB64, dappId };\n  }\n\n  // endregion\n\n  export function serialize(\n    dappInfo: DappInfo,\n    args: ConnectRequest.Args = {},\n  ): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequestWithArgs({ args, dappInfo, name, version: currentVersion }, serializeArgs);\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, SupportedVersions>): ConnectRequest {\n    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface UserApproval<TApprovalArgs> {\n  args: TApprovalArgs;\n  status: 'approved';\n}\n\nexport interface UserDismissal {\n  status: 'dismissed';\n}\n\nexport type UserResponse<TApprovalArgs> = UserApproval<TApprovalArgs> | UserDismissal;\n\nexport function makeUserApproval<TApprovalArgs>(args: TApprovalArgs): UserApproval<TApprovalArgs> {\n  return { args, status: 'approved' };\n}\n\nexport function makeUserResponseSerializeFn<TArgs>(\n  serializeArgs: SerializeFn<TArgs>,\n): SerializeFn<UserResponse<TArgs>> {\n  return (serializer: Serializer, value: UserResponse<TArgs>) => {\n    serializer.serializeBool(value.status === 'approved');\n    if (value.status === 'approved') {\n      serializeArgs(serializer, value.args);\n    }\n  };\n}\n\nexport function makeUserResponseDeserializeFn<TArgs>(\n  deserializeArgs: DeserializeFn<TArgs>,\n): DeserializeFn<UserResponse<TArgs>> {\n  return (deserializer: Deserializer) => {\n    const isApproved = deserializer.deserializeBool();\n    return isApproved ? { args: deserializeArgs(deserializer), status: 'approved' } : { status: 'dismissed' };\n  };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DeserializeFn, SerializeFn } from './helpers';\n\nexport interface WalletResponseWithArgs<TResponseArgs> {\n  args: TResponseArgs;\n}\n\nexport interface SerializedWalletResponse {\n  data: Uint8Array;\n}\n\nexport function serializeWalletResponse<TArgs>(args: TArgs, serializeFn: SerializeFn<TArgs>): SerializedWalletResponse {\n  const serializer = new Serializer();\n  serializeFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data };\n}\n\nexport function deserializeWalletResponse<TArgs>(\n  { data }: SerializedWalletResponse,\n  deserializeFn: DeserializeFn<TArgs>,\n): WalletResponseWithArgs<TArgs> {\n  const deserializer = new Deserializer(data);\n  const args = deserializeFn(deserializer);\n  return { args };\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { FinalizedPairingData, SerializedDate } from '@identity-connect/api';\nimport { type AccountInfo, deserializeAccountInfo, serializeAccountInfo } from '../../shared';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface ConnectResponse extends WalletResponseWithArgs<ConnectResponse.Args> {}\n\nexport namespace ConnectResponse {\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 2 as const;\n\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    account: AccountInfo;\n    pairing?: SerializedDate<FinalizedPairingData>;\n  }\n\n  function serializeApprovalArgsV1(serializer: Serializer, value: ApprovalArgs) {\n    serializeAccountInfo(serializer, value.account);\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializeAccountInfo(serializer, value.account);\n    serializer.serializeOptionStr(value.pairing !== undefined ? JSON.stringify(value.pairing) : undefined);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const account = deserializeAccountInfo(deserializer);\n    const serializedPairing = deserializer.deserializeOptionStr();\n    const pairing = serializedPairing !== undefined ? JSON.parse(serializedPairing) : undefined;\n    return { account, pairing };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = ConnectResponse;\n\n  export function serialize(args: Args, version: SupportedVersions = currentVersion): SerializedWalletResponse {\n    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface DisconnectRequest\n  extends WalletRequest<DisconnectRequest.RequestName, DisconnectRequest.CurrentVersion> {}\n\nexport namespace DisconnectRequest {\n  export const name = 'disconnect' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, CurrentVersion>): DisconnectRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface DisconnectResponse extends WalletResponseWithArgs<DisconnectResponse.Args> {}\n\nexport namespace DisconnectResponse {\n  export type Args = {};\n  type _Response = DisconnectResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, () => {});\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, () => ({}));\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface GetConnectedAccountsRequest\n  extends WalletRequest<GetConnectedAccountsRequest.RequestName, GetConnectedAccountsRequest.CurrentVersion> {}\n\nexport namespace GetConnectedAccountsRequest {\n  export const name = 'getConnectedAccounts' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(\n    request: SerializedWalletRequest<RequestName, CurrentVersion>,\n  ): GetConnectedAccountsRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { type AccountInfo, deserializeAccountInfo, serializeAccountInfo } from '../../shared';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface GetConnectedAccountsResponse extends WalletResponseWithArgs<GetConnectedAccountsResponse.Args> {}\n\nexport namespace GetConnectedAccountsResponse {\n  // region Args\n\n  export type Args = AccountInfo[];\n\n  function serializeArgs(serializer: Serializer, args: Args) {\n    serializer.serializeU32AsUleb128(args.length);\n    for (const account of args) {\n      serializeAccountInfo(serializer, account);\n    }\n  }\n\n  function deserializeArgs(deserializer: Deserializer): Args {\n    const length = deserializer.deserializeUleb128AsU32();\n\n    const accounts: AccountInfo[] = [];\n    for (let i = 0; i < length; i += 1) {\n      accounts.push(deserializeAccountInfo(deserializer));\n    }\n\n    return accounts;\n  }\n\n  // endregion\n\n  type _Response = GetConnectedAccountsResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequest,\n  SerializedWalletRequest,\n  serializeWalletRequest,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface IsConnectedRequest\n  extends WalletRequest<IsConnectedRequest.RequestName, IsConnectedRequest.CurrentVersion> {}\n\nexport namespace IsConnectedRequest {\n  export const name = 'isConnected' as const;\n  export type RequestName = typeof name;\n\n  export const currentVersion = 1 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  export function serialize(dappInfo: DappInfo): SerializedWalletRequest<RequestName, CurrentVersion> {\n    return serializeWalletRequest({ dappInfo, name, version: currentVersion });\n  }\n\n  export function deserialize(request: SerializedWalletRequest<RequestName, CurrentVersion>): IsConnectedRequest {\n    return deserializeWalletRequest(request);\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, CurrentVersion> {\n    return request.name === name && request.version === currentVersion;\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface IsConnectedResponse extends WalletResponseWithArgs<IsConnectedResponse.Args> {}\n\nexport namespace IsConnectedResponse {\n  // region Args\n\n  export type Args = boolean;\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeBool(value);\n  }\n\n  function deserializeArgs(deserializer: Deserializer): Args {\n    return deserializer.deserializeBool();\n  }\n\n  // endregion\n\n  type _Response = IsConnectedResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  AccountAddress,\n  Deserializer,\n  InputGenerateTransactionPayloadData,\n  Network,\n  Serializer,\n  TransactionPayload,\n} from '@aptos-labs/ts-sdk';\nimport { isSupportedNetwork } from '../../helpers';\nimport {\n  AccountAuthenticatorInput,\n  DappInfo,\n  deserializeAccountAuthenticatorInput,\n  deserializeTransactionPayloadInput,\n  serializeAccountAuthenticatorInput,\n  serializeTransactionPayloadInput,\n} from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignAndSubmitTransactionRequest\n  extends WalletRequest<\n    SignAndSubmitTransactionRequest.RequestName,\n    SignAndSubmitTransactionRequest.SupportedVersions\n  > {\n  args: SignAndSubmitTransactionRequest.Args;\n}\n\nexport namespace SignAndSubmitTransactionRequest {\n  export const name = 'signAndSubmitTransaction' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2, 3] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 3 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    expirationTimestamp?: number;\n    feePayer?: AccountAuthenticatorInput;\n    gasUnitPrice?: number;\n    maxGasAmount?: number;\n    network?: Network;\n    payload: TransactionPayload | InputGenerateTransactionPayloadData;\n    signerAddress?: AccountAddress;\n  }\n\n  export function serializeArgs(serializer: Serializer, value: Args) {\n    if (value.network !== undefined && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n\n    serializer.serializeOptionStr(value.network);\n\n    if ('bcsToBytes' in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeU32AsUleb128(value.feePayer ? 1 : 0);\n    if (value.feePayer) {\n      serializeAccountAuthenticatorInput(serializer, value.feePayer);\n    }\n  }\n\n  export function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();\n    if (network !== undefined && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n\n    const isPayloadBcsSerializable = version === 1 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable\n      ? deserializer.deserialize(TransactionPayload)\n      : deserializeTransactionPayloadInput(deserializer);\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeUleb128AsU32();\n    const feePayer = hasFeePayer ? deserializeAccountAuthenticatorInput(deserializer) : undefined;\n\n    return {\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : undefined,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : undefined,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : undefined,\n      network,\n      payload,\n      signerAddress,\n    };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignAndSubmitTransactionRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (deserializer) =>\n      deserializeArgs(deserializer, serializedRequest.version),\n    );\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignAndSubmitTransactionResponse\n  extends WalletResponseWithArgs<SignAndSubmitTransactionResponse.Args> {}\n\nexport namespace SignAndSubmitTransactionResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    txnHash: string;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serializeStr(value.txnHash);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const txnHash = deserializer.deserializeStr();\n    return { txnHash };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignAndSubmitTransactionResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { AccountAddress, Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { DappInfo } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignMessageRequest\n  extends WalletRequest<SignMessageRequest.RequestName, SignMessageRequest.SupportedVersions> {\n  args: SignMessageRequest.Args;\n}\n\nexport namespace SignMessageRequest {\n  export const name = 'signMessage' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 2 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    chainId: number;\n    message: Uint8Array;\n    nonce: Uint8Array;\n    signerAddress?: AccountAddress;\n  }\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeU8(value.chainId);\n    serializer.serializeBytes(value.nonce);\n    serializer.serializeBytes(value.message);\n  }\n\n  function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 2 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n    const chainId = deserializer.deserializeU8();\n    const nonce = deserializer.deserializeBytes();\n    const message = deserializer.deserializeBytes();\n    return { chainId, message, nonce, signerAddress };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignMessageRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (d) => deserializeArgs(d, serializedRequest.version));\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && request.version === currentVersion;\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { Deserializer, Serializer, Signature } from '@aptos-labs/ts-sdk';\nimport { deserializeSignature, serializeSignature } from '../../shared';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignMessageResponse extends WalletResponseWithArgs<SignMessageResponse.Args> {}\n\nexport namespace SignMessageResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    // Should return message parts\n    fullMessage: string;\n    signature: Signature;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serializeStr(value.fullMessage);\n    serializeSignature(serializer, value.signature);\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const fullMessage = deserializer.deserializeStr();\n    const signature = deserializeSignature(deserializer);\n    return { fullMessage, signature };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignMessageResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport {\n  AccountAddress,\n  Deserializer,\n  Network,\n  PublicKey,\n  RawTransaction,\n  Serializer,\n  TransactionPayload,\n} from '@aptos-labs/ts-sdk';\nimport { chainIdToNetwork, isSupportedNetwork } from '../../helpers';\nimport { AccountInput, DappInfo, deserializeAccountInput, serializeAccountInput } from '../../shared';\nimport {\n  deserializeWalletRequestWithArgs,\n  SerializedWalletRequest,\n  serializeWalletRequestWithArgs,\n  WalletRequest,\n} from '../../WalletRequest';\n\nexport interface SignTransactionRequest\n  extends WalletRequest<SignTransactionRequest.RequestName, SignTransactionRequest.SupportedVersions> {\n  args: SignTransactionRequest.Args;\n}\n\nexport namespace SignTransactionRequest {\n  export const name = 'signTransaction' as const;\n  export type RequestName = typeof name;\n\n  export const supportedVersions = [1, 2, 3] as const;\n  export type SupportedVersions = (typeof supportedVersions)[number];\n  export const currentVersion = 3 as const;\n  export type CurrentVersion = typeof currentVersion;\n\n  // region Args\n\n  export interface Args {\n    expirationSecondsFromNow?: number;\n    expirationTimestamp?: number;\n    feePayer?: AccountInput;\n    gasUnitPrice?: number;\n    maxGasAmount?: number;\n    network?: Network;\n    payload: TransactionPayload;\n    secondarySigners?: AccountInput[];\n    sender?: AccountInput;\n    sequenceNumber?: number | bigint;\n    signerAddress?: AccountAddress;\n  }\n\n  export interface ArgsWithTransaction {\n    feePayer?: AccountInput;\n    secondarySigners?: AccountInput[];\n    senderPublicKey?: PublicKey;\n    signerAddress?: AccountAddress;\n    transaction: RawTransaction;\n  }\n\n  export function normalizeArgs(args: ArgsWithTransaction): Args {\n    const { feePayer, secondarySigners, senderPublicKey, signerAddress, transaction } = args;\n\n    const sender: AccountInput = {\n      address: transaction.sender,\n      publicKey: senderPublicKey,\n    };\n\n    const network = chainIdToNetwork(args.transaction.chain_id.chainId);\n\n    return {\n      expirationTimestamp: Number(transaction.expiration_timestamp_secs),\n      feePayer,\n      gasUnitPrice: Number(transaction.gas_unit_price),\n      maxGasAmount: Number(transaction.max_gas_amount),\n      network,\n      payload: transaction.payload,\n      secondarySigners,\n      sender,\n      signerAddress,\n    };\n  }\n\n  function serializeArgs(serializer: Serializer, value: Args) {\n    if (value.network !== undefined && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n\n    serializer.serializeBool(value.signerAddress !== undefined);\n    if (value.signerAddress !== undefined) {\n      serializer.serialize(value.signerAddress);\n    }\n\n    serializer.serializeOptionStr(value.network);\n    serializer.serializeBool(value.sender !== undefined);\n    if (value.sender !== undefined) {\n      serializeAccountInput(serializer, value.sender);\n    }\n\n    serializer.serialize(value.payload);\n    serializer.serializeU32AsUleb128(value.expirationSecondsFromNow ?? 0);\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n\n    serializer.serializeBool(value.feePayer !== undefined);\n    if (value.feePayer !== undefined) {\n      serializeAccountInput(serializer, value.feePayer);\n    }\n\n    const secondarySigners = value.secondarySigners ?? [];\n    serializer.serializeU32AsUleb128(secondarySigners.length);\n    for (const signer of secondarySigners) {\n      serializeAccountInput(serializer, signer);\n    }\n  }\n\n  function deserializeArgs(deserializer: Deserializer, version: SupportedVersions): Args {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(AccountAddress) : undefined;\n\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();\n    if (network !== undefined && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n\n    const hasSender = deserializer.deserializeBool();\n    const sender = hasSender ? deserializeAccountInput(deserializer) : undefined;\n    const payload = deserializer.deserialize(TransactionPayload);\n\n    const expirationSecondsFromNow = deserializer.deserializeUleb128AsU32();\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n\n    const hasFeePayer = deserializer.deserializeBool();\n    const feePayer = hasFeePayer ? deserializeAccountInput(deserializer) : undefined;\n\n    const secondarySignersLength = deserializer.deserializeUleb128AsU32();\n    const secondarySigners: AccountInput[] = [];\n    for (let i = 0; i < secondarySignersLength; i += 1) {\n      secondarySigners.push(deserializeAccountInput(deserializer));\n    }\n\n    return {\n      expirationSecondsFromNow: expirationSecondsFromNow > 0 ? expirationSecondsFromNow : undefined,\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : undefined,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : undefined,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : undefined,\n      network,\n      payload,\n      secondarySigners,\n      sender,\n      signerAddress,\n    };\n  }\n\n  // endregion\n\n  // region Request\n\n  export function serialize(dappInfo: DappInfo, args: Args): SerializedWalletRequest<RequestName, CurrentVersion> {\n    const request = { args, dappInfo, name, version: currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n\n  export function deserialize(\n    serializedRequest: SerializedWalletRequest<RequestName, SupportedVersions>,\n  ): SignTransactionRequest {\n    return deserializeWalletRequestWithArgs(serializedRequest, (deserializer) =>\n      deserializeArgs(deserializer, serializedRequest.version),\n    );\n  }\n\n  export function isSerialized(\n    request: SerializedWalletRequest,\n  ): request is SerializedWalletRequest<RequestName, SupportedVersions> {\n    return request.name === name && supportedVersions.includes(request.version as SupportedVersions);\n  }\n\n  // endregion\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\n/* eslint-disable no-inner-declarations */\n\nimport { AccountAuthenticator, Deserializer, RawTransaction, Serializer } from '@aptos-labs/ts-sdk';\nimport { makeUserResponseDeserializeFn, makeUserResponseSerializeFn, UserResponse } from '../../UserResponse';\nimport {\n  deserializeWalletResponse,\n  SerializedWalletResponse,\n  serializeWalletResponse,\n  WalletResponseWithArgs,\n} from '../../WalletResponse';\n\nexport interface SignTransactionResponse extends WalletResponseWithArgs<SignTransactionResponse.Args> {}\n\nexport namespace SignTransactionResponse {\n  // region ApprovalArgs\n\n  export interface ApprovalArgs {\n    authenticator: AccountAuthenticator;\n    rawTransaction?: RawTransaction;\n  }\n\n  function serializeApprovalArgs(serializer: Serializer, value: ApprovalArgs) {\n    serializer.serialize(value.authenticator);\n    serializer.serializeBool(value.rawTransaction !== undefined);\n    if (value.rawTransaction !== undefined) {\n      serializer.serialize(value.rawTransaction);\n    }\n  }\n\n  function deserializeApprovalArgs(deserializer: Deserializer): ApprovalArgs {\n    const authenticator = deserializer.deserialize(AccountAuthenticator);\n    const hasRawTransaction = deserializer.deserializeBool();\n    const rawTransaction = hasRawTransaction ? deserializer.deserialize(RawTransaction) : undefined;\n\n    return {\n      authenticator,\n      rawTransaction,\n    };\n  }\n\n  // endregion\n\n  // region ResponseArgs\n\n  export type Args = UserResponse<ApprovalArgs>;\n\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n\n  // endregion\n\n  type _Response = SignTransactionResponse;\n\n  export function serialize(args: Args): SerializedWalletResponse {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n\n  export function deserialize(serializedResponse: SerializedWalletResponse): _Response {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nexport type TypedMessage<MessageType extends string = string> = { __messageType: MessageType };\nexport type TypedMessageConstructor<TMessage extends TypedMessage<MessageType>, MessageType extends string> = {\n  TYPE: MessageType;\n  new (...args: any[]): TMessage;\n};\n\nexport function isTypedMessage<TMessage extends TypedMessage<MessageType>, MessageType extends string>(\n  messageCls: TypedMessageConstructor<TMessage, MessageType>,\n  message: any,\n): message is TMessage {\n  return message?.__messageType === messageCls.TYPE;\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AptosWalletError } from '@aptos-labs/wallet-standard';\nimport { SerializedWalletRequest } from '../WalletRequest';\nimport { SerializedWalletResponse } from '../WalletResponse';\nimport { isTypedMessage, TypedMessage } from './common';\n\nexport class AptosWalletRequestMessage implements TypedMessage {\n  static readonly TYPE = 'AptosWalletRequest';\n  readonly __messageType = AptosWalletRequestMessage.TYPE;\n\n  constructor(\n    public nonce: string,\n    public serializedValue: SerializedWalletRequest,\n  ) {}\n}\n\nexport class AptosWalletSuccessResponseMessage implements TypedMessage {\n  static readonly TYPE = 'AptosWalletSuccessResponseMessage';\n  readonly __messageType = AptosWalletSuccessResponseMessage.TYPE;\n\n  constructor(\n    public serializedValue: SerializedWalletResponse,\n    public nonce: string,\n  ) {}\n}\n\nexport class AptosWalletErrorResponseMessage implements TypedMessage {\n  static readonly TYPE = 'AptosWalletErrorResponseMessage';\n  readonly __messageType = AptosWalletErrorResponseMessage.TYPE;\n\n  constructor(\n    public error: AptosWalletError,\n    public nonce: string,\n  ) {}\n}\n\nexport type AptosWalletResponseMessage = AptosWalletSuccessResponseMessage | AptosWalletErrorResponseMessage;\n\nexport function isAptosWalletResponseMessage(message: any): message is AptosWalletResponseMessage {\n  return (\n    isTypedMessage(AptosWalletSuccessResponseMessage, message) ||\n    isTypedMessage(AptosWalletErrorResponseMessage, message)\n  );\n}\n","// Copyright © Aptos\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Deserializer, Serializer } from '@aptos-labs/ts-sdk';\nimport { base64ToBytes, bytesToBase64 } from '../base64';\nimport { SerializedWalletRequest } from '../WalletRequest';\nimport { SerializedWalletResponse } from '../WalletResponse';\nimport { TypedMessage } from './common';\n\nexport class PromptOpenerPingRequestMessage implements TypedMessage {\n  static readonly TYPE = 'PromptOpenerPingRequest';\n  readonly __messageType = PromptOpenerPingRequestMessage.TYPE;\n}\n\nexport class PromptOpenerPingResponseMessage implements TypedMessage {\n  static readonly TYPE = 'PromptOpenerPingResponse';\n  readonly __messageType = PromptOpenerPingResponseMessage.TYPE;\n}\n\nexport class PromptApprovalResponseMessage implements TypedMessage {\n  static readonly TYPE = 'PromptApprovalResponse';\n  readonly __messageType = PromptApprovalResponseMessage.TYPE;\n\n  constructor(public serializedValue: SerializedWalletResponse) {}\n}\n\nexport class PromptUnauthorizedErrorMessage implements TypedMessage {\n  static readonly TYPE = 'PromptUnauthorizedError';\n  readonly __messageType = PromptUnauthorizedErrorMessage.TYPE;\n}\n\nexport function urlEncodeWalletRequest(request: SerializedWalletRequest) {\n  const serializer = new Serializer();\n  serializer.serializeStr(request.name);\n  serializer.serializeBytes(request.data);\n  serializer.serializeStr(request.version.toString());\n  return bytesToBase64(serializer.toUint8Array());\n}\n\nexport function urlDecodeWalletRequest(encodedRequest: string): SerializedWalletRequest {\n  const deserializer = new Deserializer(base64ToBytes(encodedRequest));\n  const name = deserializer.deserializeStr();\n  const data = deserializer.deserializeBytes();\n\n  let version: number;\n  try {\n    version = Number(deserializer.deserializeStr());\n  } catch {\n    version = 1;\n  }\n  return { data, name, version };\n}\n"],"mappings":"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","names":["import_ts_sdk","import_ts_sdk","import_ts_sdk","import_ts_sdk","import_ts_sdk","import_ts_sdk","EntryFunctionArgumentVariant","import_ts_sdk","import_ts_sdk","TransactionPayloadInputVariant","ConnectRequest","import_ts_sdk","ConnectResponse","DisconnectRequest","DisconnectResponse","GetConnectedAccountsRequest","GetConnectedAccountsResponse","IsConnectedRequest","IsConnectedResponse","import_ts_sdk","SignAndSubmitTransactionRequest","SignAndSubmitTransactionResponse","import_ts_sdk","SignMessageRequest","SignMessageResponse","import_ts_sdk","SignTransactionRequest","import_ts_sdk","SignTransactionResponse","import_ts_sdk"]}