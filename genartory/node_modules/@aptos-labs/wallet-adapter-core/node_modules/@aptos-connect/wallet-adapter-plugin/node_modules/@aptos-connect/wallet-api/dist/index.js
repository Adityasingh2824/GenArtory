"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AptosWalletErrorResponseMessage: () => AptosWalletErrorResponseMessage,
  AptosWalletRequestMessage: () => AptosWalletRequestMessage,
  AptosWalletSuccessResponseMessage: () => AptosWalletSuccessResponseMessage,
  ConnectRequest: () => ConnectRequest,
  ConnectResponse: () => ConnectResponse,
  DisconnectRequest: () => DisconnectRequest,
  DisconnectResponse: () => DisconnectResponse,
  EntryFunctionArgumentVariant: () => EntryFunctionArgumentVariant,
  GetConnectedAccountsRequest: () => GetConnectedAccountsRequest,
  GetConnectedAccountsResponse: () => GetConnectedAccountsResponse,
  IsConnectedRequest: () => IsConnectedRequest,
  IsConnectedResponse: () => IsConnectedResponse,
  PromptApprovalResponseMessage: () => PromptApprovalResponseMessage,
  PromptOpenerPingRequestMessage: () => PromptOpenerPingRequestMessage,
  PromptOpenerPingResponseMessage: () => PromptOpenerPingResponseMessage,
  PromptUnauthorizedErrorMessage: () => PromptUnauthorizedErrorMessage,
  SignAndSubmitTransactionRequest: () => SignAndSubmitTransactionRequest,
  SignAndSubmitTransactionResponse: () => SignAndSubmitTransactionResponse,
  SignMessageRequest: () => SignMessageRequest,
  SignMessageResponse: () => SignMessageResponse,
  SignTransactionRequest: () => SignTransactionRequest,
  SignTransactionResponse: () => SignTransactionResponse,
  TransactionPayloadInputVariant: () => TransactionPayloadInputVariant,
  base64ToBytes: () => base64ToBytes,
  bytesToBase64: () => bytesToBase64,
  chainIdToNetwork: () => chainIdToNetwork,
  deserializeAccountAuthenticatorInput: () => deserializeAccountAuthenticatorInput,
  deserializeAccountInfo: () => deserializeAccountInfo,
  deserializeAccountInput: () => deserializeAccountInput,
  deserializeDappInfo: () => deserializeDappInfo,
  deserializeEntryFunctionArgument: () => deserializeEntryFunctionArgument,
  deserializePublicKey: () => deserializePublicKey,
  deserializeSignature: () => deserializeSignature,
  deserializeTransactionPayloadInput: () => deserializeTransactionPayloadInput,
  deserializeWalletRequest: () => deserializeWalletRequest,
  deserializeWalletRequestWithArgs: () => deserializeWalletRequestWithArgs,
  deserializeWalletResponse: () => deserializeWalletResponse,
  isAptosWalletResponseMessage: () => isAptosWalletResponseMessage,
  isSupportedNetwork: () => isSupportedNetwork,
  isTypedMessage: () => isTypedMessage,
  makeUserApproval: () => makeUserApproval,
  makeUserResponseDeserializeFn: () => makeUserResponseDeserializeFn,
  makeUserResponseSerializeFn: () => makeUserResponseSerializeFn,
  serializeAccountAuthenticatorInput: () => serializeAccountAuthenticatorInput,
  serializeAccountInfo: () => serializeAccountInfo,
  serializeAccountInput: () => serializeAccountInput,
  serializeDappInfo: () => serializeDappInfo,
  serializeEntryFunctionArgument: () => serializeEntryFunctionArgument,
  serializePublicKey: () => serializePublicKey,
  serializeSignature: () => serializeSignature,
  serializeTransactionPayloadInput: () => serializeTransactionPayloadInput,
  serializeWalletRequest: () => serializeWalletRequest,
  serializeWalletRequestWithArgs: () => serializeWalletRequestWithArgs,
  serializeWalletResponse: () => serializeWalletResponse,
  urlDecodeWalletRequest: () => urlDecodeWalletRequest,
  urlEncodeWalletRequest: () => urlEncodeWalletRequest
});
module.exports = __toCommonJS(src_exports);

// src/base64.ts
function base64ToBytes(base64) {
  const binaryString = atob(base64);
  return Uint8Array.from(binaryString, (m) => m.charCodeAt(0));
}
function bytesToBase64(bytes) {
  const binaryString = String.fromCharCode(...bytes);
  return btoa(binaryString);
}

// src/helpers.ts
var import_ts_sdk = require("@aptos-labs/ts-sdk");
function chainIdToNetwork(chainId) {
  switch (chainId) {
    case import_ts_sdk.NetworkToChainId.mainnet:
      return import_ts_sdk.Network.MAINNET;
    case import_ts_sdk.NetworkToChainId.testnet:
      return import_ts_sdk.Network.TESTNET;
    default:
      return import_ts_sdk.Network.DEVNET;
  }
}
function isSupportedNetwork(network) {
  return [import_ts_sdk.Network.MAINNET, import_ts_sdk.Network.TESTNET, import_ts_sdk.Network.DEVNET].includes(network);
}

// src/WalletRequest.ts
var import_ts_sdk9 = require("@aptos-labs/ts-sdk");

// src/shared/AccountAuthenticatorInput.ts
var import_ts_sdk2 = require("@aptos-labs/ts-sdk");
function serializeAccountAuthenticatorInput(serializer, value) {
  serializer.serialize(value.address);
  serializer.serialize(value.authenticator);
}
function deserializeAccountAuthenticatorInput(deserializer) {
  const address = deserializer.deserialize(import_ts_sdk2.AccountAddress);
  const authenticator = deserializer.deserialize(import_ts_sdk2.AccountAuthenticator);
  return { address, authenticator };
}

// src/shared/AccountInfo.ts
var import_ts_sdk4 = require("@aptos-labs/ts-sdk");

// src/shared/PublicKey.ts
var import_ts_sdk3 = require("@aptos-labs/ts-sdk");
function serializePublicKey(serializer, value) {
  if (value instanceof import_ts_sdk3.Ed25519PublicKey) {
    serializer.serializeU32AsUleb128(import_ts_sdk3.SigningScheme.Ed25519);
  } else if (value instanceof import_ts_sdk3.MultiEd25519PublicKey) {
    serializer.serializeU32AsUleb128(import_ts_sdk3.SigningScheme.MultiEd25519);
  } else if (value instanceof import_ts_sdk3.AnyPublicKey) {
    serializer.serializeU32AsUleb128(import_ts_sdk3.SigningScheme.SingleKey);
  } else if (value instanceof import_ts_sdk3.MultiKey) {
    serializer.serializeU32AsUleb128(import_ts_sdk3.SigningScheme.MultiKey);
  } else {
    throw new Error("Unexpected public key type");
  }
  serializer.serialize(value);
}
function deserializePublicKey(deserializer) {
  const signingScheme = deserializer.deserializeUleb128AsU32();
  switch (signingScheme) {
    case import_ts_sdk3.SigningScheme.Ed25519:
      return deserializer.deserialize(import_ts_sdk3.Ed25519PublicKey);
    case import_ts_sdk3.SigningScheme.MultiEd25519:
      return deserializer.deserialize(import_ts_sdk3.MultiEd25519PublicKey);
    case import_ts_sdk3.SigningScheme.SingleKey:
      return deserializer.deserialize(import_ts_sdk3.AnyPublicKey);
    case import_ts_sdk3.SigningScheme.MultiKey:
      return deserializer.deserialize(import_ts_sdk3.MultiKey);
    default:
      throw new Error(`Unknown signing scheme: ${signingScheme}`);
  }
}

// src/shared/AccountInfo.ts
function serializeAccountInfo(serializer, value) {
  serializer.serialize(value.address);
  serializePublicKey(serializer, value.publicKey);
  serializer.serializeStr(value.name ?? "");
}
function deserializeAccountInfo(deserializer) {
  const address = deserializer.deserialize(import_ts_sdk4.AccountAddress);
  const publicKey = deserializePublicKey(deserializer);
  const name = deserializer.deserializeStr();
  return {
    address,
    publicKey,
    ...name.length > 0 ? { name } : void 0
  };
}

// src/shared/AccountInput.ts
var import_ts_sdk5 = require("@aptos-labs/ts-sdk");
function serializeAccountInput(serializer, value) {
  serializer.serialize(value.address);
  serializer.serializeBool(value.publicKey !== void 0);
  if (value.publicKey) {
    serializePublicKey(serializer, value.publicKey);
  }
}
function deserializeAccountInput(deserializer) {
  const address = deserializer.deserialize(import_ts_sdk5.AccountAddress);
  const hasPublicKey = deserializer.deserializeBool();
  const publicKey = hasPublicKey ? deserializePublicKey(deserializer) : void 0;
  return { address, publicKey };
}

// src/shared/DappInfo.ts
function serializeDappInfo(serializer, value) {
  serializer.serializeStr(value.domain);
  serializer.serializeStr(value.name);
  serializer.serializeBool(value.imageURI !== void 0);
  if (value.imageURI !== void 0) {
    serializer.serializeStr(value.imageURI);
  }
}
function deserializeDappInfo(deserializer) {
  const domain = deserializer.deserializeStr();
  const name = deserializer.deserializeStr();
  const hasImageUri = deserializer.deserializeBool();
  const imageURI = hasImageUri ? deserializer.deserializeStr() : void 0;
  return { domain, imageURI, name };
}

// src/shared/EntryFunctionArgument.ts
var import_ts_sdk6 = require("@aptos-labs/ts-sdk");
var EntryFunctionArgumentVariant = /* @__PURE__ */ ((EntryFunctionArgumentVariant2) => {
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["Undefined"] = 0] = "Undefined";
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["Array"] = 1] = "Array";
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["String"] = 2] = "String";
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["Uint8Array"] = 3] = "Uint8Array";
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["AccountAddress"] = 4] = "AccountAddress";
  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2["FixedBytes"] = 5] = "FixedBytes";
  return EntryFunctionArgumentVariant2;
})(EntryFunctionArgumentVariant || {});
function serializeEntryFunctionArgument(serializer, argument) {
  if (argument === void 0 || argument === null) {
    serializer.serializeU32AsUleb128(0 /* Undefined */);
    return;
  }
  if (Array.isArray(argument)) {
    serializer.serializeU32AsUleb128(1 /* Array */);
    serializer.serializeU32AsUleb128(argument.length);
    for (const subArgument of argument) {
      serializeEntryFunctionArgument(serializer, subArgument);
    }
    return;
  }
  if (typeof argument === "string" || typeof argument === "number" || typeof argument === "boolean" || typeof argument === "bigint") {
    serializer.serializeU32AsUleb128(2 /* String */);
    serializer.serializeStr(argument.toString());
    return;
  }
  if (argument instanceof Uint8Array) {
    serializer.serializeU32AsUleb128(3 /* Uint8Array */);
    serializer.serializeBytes(argument);
    return;
  }
  if (argument instanceof ArrayBuffer) {
    serializer.serializeU32AsUleb128(3 /* Uint8Array */);
    serializer.serializeBytes(new Uint8Array(argument));
    return;
  }
  if ("values" in argument) {
    serializer.serializeU32AsUleb128(1 /* Array */);
    serializer.serializeU32AsUleb128(argument.values.length);
    for (const subArgument of argument.values) {
      serializeEntryFunctionArgument(serializer, subArgument);
    }
    return;
  }
  if ("data" in argument) {
    serializer.serializeU32AsUleb128(4 /* AccountAddress */);
    serializer.serialize(argument);
    return;
  }
  if (argument.value === void 0) {
    serializer.serializeU32AsUleb128(0 /* Undefined */);
    serializer.serialize(argument);
    return;
  }
  if (argument.value instanceof Uint8Array) {
    serializer.serializeU32AsUleb128(5 /* FixedBytes */);
    serializer.serializeBytes(argument.value);
    return;
  }
  serializer.serializeU32AsUleb128(2 /* String */);
  serializer.serializeStr(argument.value.toString());
}
function deserializeEntryFunctionArgument(deserializer) {
  const variant = deserializer.deserializeUleb128AsU32();
  switch (variant) {
    case 0 /* Undefined */: {
      return void 0;
    }
    case 1 /* Array */: {
      const length = deserializer.deserializeUleb128AsU32();
      const args = [];
      for (let i = 0; i < length; i += 1) {
        const argument = deserializeEntryFunctionArgument(deserializer);
        args.push(argument);
      }
      return args;
    }
    case 3 /* Uint8Array */: {
      return deserializer.deserializeBytes();
    }
    case 4 /* AccountAddress */: {
      return deserializer.deserialize(import_ts_sdk6.AccountAddress);
    }
    case 2 /* String */: {
      return deserializer.deserializeStr();
    }
    case 5 /* FixedBytes */: {
      const bytes = deserializer.deserializeBytes();
      return new import_ts_sdk6.FixedBytes(bytes);
    }
    default: {
      throw new Error("Unexpected variant");
    }
  }
}

// src/shared/Signature.ts
var import_ts_sdk7 = require("@aptos-labs/ts-sdk");
function serializeSignature(serializer, value) {
  if (value instanceof import_ts_sdk7.Ed25519Signature) {
    serializer.serializeU32AsUleb128(import_ts_sdk7.SigningScheme.Ed25519);
  } else if (value instanceof import_ts_sdk7.MultiEd25519Signature) {
    serializer.serializeU32AsUleb128(import_ts_sdk7.SigningScheme.MultiEd25519);
  } else if (value instanceof import_ts_sdk7.AnySignature) {
    serializer.serializeU32AsUleb128(import_ts_sdk7.SigningScheme.SingleKey);
  } else {
    throw new Error("Unexpected signature type");
  }
  serializer.serialize(value);
}
function deserializeSignature(deserializer) {
  const signingScheme = deserializer.deserializeUleb128AsU32();
  switch (signingScheme) {
    case import_ts_sdk7.SigningScheme.Ed25519:
      return deserializer.deserialize(import_ts_sdk7.Ed25519Signature);
    case import_ts_sdk7.SigningScheme.MultiEd25519:
      return deserializer.deserialize(import_ts_sdk7.MultiEd25519Signature);
    case import_ts_sdk7.SigningScheme.SingleKey:
      return deserializer.deserialize(import_ts_sdk7.AnySignature);
    default:
      throw new Error(`Unknown signing scheme: ${signingScheme}`);
  }
}

// src/shared/TransactionPayloadInput.ts
var import_ts_sdk8 = require("@aptos-labs/ts-sdk");
var TransactionPayloadInputVariant = /* @__PURE__ */ ((TransactionPayloadInputVariant2) => {
  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2["EntryFunction"] = 0] = "EntryFunction";
  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2["Script"] = 1] = "Script";
  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2["Multisig"] = 2] = "Multisig";
  return TransactionPayloadInputVariant2;
})(TransactionPayloadInputVariant || {});
function serializeTypeArguments(serializer, typeArguments) {
  serializer.serializeU32AsUleb128(typeArguments.length);
  for (const typeArgument of typeArguments) {
    const typeTag = typeof typeArgument === "string" ? (0, import_ts_sdk8.parseTypeTag)(typeArgument, { allowGenerics: true }) : typeArgument;
    serializer.serialize(typeTag);
  }
}
function deserializeTypeArguments(deserializer) {
  const typeArguments = [];
  const typeArgumentsLength = deserializer.deserializeUleb128AsU32();
  for (let i = 0; i < typeArgumentsLength; i += 1) {
    const typeTag = deserializer.deserialize(import_ts_sdk8.TypeTag);
    typeArguments.push(typeTag);
  }
  return typeArguments;
}
function serializeEntryFunctionArguments(serializer, functionArguments) {
  serializer.serializeU32AsUleb128(functionArguments.length);
  for (const functionArgument of functionArguments) {
    serializeEntryFunctionArgument(serializer, functionArgument);
  }
}
function deserializeEntryFunctionArguments(deserializer) {
  const functionArgumentsLength = deserializer.deserializeUleb128AsU32();
  const functionArguments = [];
  for (let i = 0; i < functionArgumentsLength; i += 1) {
    const functionArgument = deserializeEntryFunctionArgument(deserializer);
    functionArguments.push(functionArgument);
  }
  return functionArguments;
}
function serializeTransactionPayloadInput(serializer, value) {
  if ("multisigAddress" in value) {
    serializer.serializeU32AsUleb128(2 /* Multisig */);
    serializer.serializeStr(value.function);
    serializeEntryFunctionArguments(serializer, value.functionArguments);
    serializeTypeArguments(serializer, value.typeArguments ?? []);
    const multisigAddress = import_ts_sdk8.AccountAddress.from(value.multisigAddress);
    serializer.serialize(multisigAddress);
  } else if ("function" in value) {
    serializer.serializeU32AsUleb128(0 /* EntryFunction */);
    serializer.serializeStr(value.function);
    serializeEntryFunctionArguments(serializer, value.functionArguments);
    serializeTypeArguments(serializer, value.typeArguments ?? []);
  } else {
    serializer.serializeU32AsUleb128(1 /* Script */);
    const bytecode = import_ts_sdk8.Hex.fromHexInput(value.bytecode);
    serializer.serializeBytes(bytecode.toUint8Array());
    serializer.serializeU32AsUleb128(value.functionArguments.length);
    for (const argument of value.functionArguments) {
      argument.serializeForScriptFunction(serializer);
    }
    serializeTypeArguments(serializer, value.typeArguments ?? []);
  }
}
function deserializeTransactionPayloadInput(deserializer) {
  const variant = deserializer.deserializeUleb128AsU32();
  switch (variant) {
    case 2 /* Multisig */: {
      const functionId = deserializer.deserializeStr();
      const functionArguments = deserializeEntryFunctionArguments(deserializer);
      const typeArguments = deserializeTypeArguments(deserializer);
      const multisigAddress = deserializer.deserialize(import_ts_sdk8.AccountAddress);
      return {
        function: functionId,
        functionArguments,
        multisigAddress,
        typeArguments
      };
    }
    case 0 /* EntryFunction */: {
      const functionId = deserializer.deserializeStr();
      const functionArguments = deserializeEntryFunctionArguments(deserializer);
      const typeArguments = deserializeTypeArguments(deserializer);
      return {
        function: functionId,
        functionArguments,
        typeArguments
      };
    }
    case 1 /* Script */: {
      const bytecode = deserializer.deserializeBytes();
      const functionArgumentsLength = deserializer.deserializeUleb128AsU32();
      const functionArguments = [];
      for (let i = 0; i < functionArgumentsLength; i += 1) {
        const argument = (0, import_ts_sdk8.deserializeFromScriptArgument)(deserializer);
        functionArguments.push(argument);
      }
      const typeArguments = deserializeTypeArguments(deserializer);
      return {
        bytecode,
        functionArguments,
        typeArguments
      };
    }
    default: {
      throw new Error("Unexpected variant");
    }
  }
}

// src/WalletRequest.ts
function serializeWalletRequest({
  dappInfo,
  name,
  version
}) {
  const serializer = new import_ts_sdk9.Serializer();
  serializeDappInfo(serializer, dappInfo);
  const data = serializer.toUint8Array();
  return { data, name, version };
}
function deserializeWalletRequest({
  data,
  name,
  version
}) {
  const deserializer = new import_ts_sdk9.Deserializer(data);
  const dappInfo = deserializeDappInfo(deserializer);
  return { dappInfo, name, version };
}
function serializeWalletRequestWithArgs({ args, dappInfo, name, version }, serializeArgsFn) {
  const serializer = new import_ts_sdk9.Serializer();
  serializeDappInfo(serializer, dappInfo);
  serializeArgsFn(serializer, args);
  const data = serializer.toUint8Array();
  return { data, name, version };
}
function deserializeWalletRequestWithArgs({ data, name, version }, deserializeArgsFn) {
  const deserializer = new import_ts_sdk9.Deserializer(data);
  const dappInfo = deserializeDappInfo(deserializer);
  const args = deserializeArgsFn(deserializer);
  return { args, dappInfo, name, version };
}

// src/features/connect/request.ts
var ConnectRequest;
((ConnectRequest2) => {
  ConnectRequest2.name = "connect";
  ConnectRequest2.supportedVersions = [1, 2];
  ConnectRequest2.currentVersion = 2;
  function serializeArgs(serializer, value) {
    serializer.serializeOptionStr(value.dappId);
    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);
  }
  ConnectRequest2.serializeArgs = serializeArgs;
  function deserializeArgs(deserializer, version) {
    if (version === 1) {
      return {};
    }
    const dappId = deserializer.deserializeOptionStr();
    const dappEd25519PublicKeyB64 = deserializer.deserializeOptionStr();
    return { dappEd25519PublicKeyB64, dappId };
  }
  ConnectRequest2.deserializeArgs = deserializeArgs;
  function serialize(dappInfo, args = {}) {
    return serializeWalletRequestWithArgs({ args, dappInfo, name: ConnectRequest2.name, version: ConnectRequest2.currentVersion }, serializeArgs);
  }
  ConnectRequest2.serialize = serialize;
  function deserialize(request) {
    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));
  }
  ConnectRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === ConnectRequest2.name && ConnectRequest2.supportedVersions.includes(request.version);
  }
  ConnectRequest2.isSerialized = isSerialized;
})(ConnectRequest || (ConnectRequest = {}));

// src/UserResponse.ts
function makeUserApproval(args) {
  return { args, status: "approved" };
}
function makeUserResponseSerializeFn(serializeArgs) {
  return (serializer, value) => {
    serializer.serializeBool(value.status === "approved");
    if (value.status === "approved") {
      serializeArgs(serializer, value.args);
    }
  };
}
function makeUserResponseDeserializeFn(deserializeArgs) {
  return (deserializer) => {
    const isApproved = deserializer.deserializeBool();
    return isApproved ? { args: deserializeArgs(deserializer), status: "approved" } : { status: "dismissed" };
  };
}

// src/WalletResponse.ts
var import_ts_sdk10 = require("@aptos-labs/ts-sdk");
function serializeWalletResponse(args, serializeFn) {
  const serializer = new import_ts_sdk10.Serializer();
  serializeFn(serializer, args);
  const data = serializer.toUint8Array();
  return { data };
}
function deserializeWalletResponse({ data }, deserializeFn) {
  const deserializer = new import_ts_sdk10.Deserializer(data);
  const args = deserializeFn(deserializer);
  return { args };
}

// src/features/connect/response.ts
var ConnectResponse;
((ConnectResponse2) => {
  ConnectResponse2.supportedVersions = [1, 2];
  ConnectResponse2.currentVersion = 2;
  function serializeApprovalArgsV1(serializer, value) {
    serializeAccountInfo(serializer, value.account);
  }
  function serializeApprovalArgs(serializer, value) {
    serializeAccountInfo(serializer, value.account);
    serializer.serializeOptionStr(value.pairing !== void 0 ? JSON.stringify(value.pairing) : void 0);
  }
  function deserializeApprovalArgs(deserializer) {
    const account = deserializeAccountInfo(deserializer);
    const serializedPairing = deserializer.deserializeOptionStr();
    const pairing = serializedPairing !== void 0 ? JSON.parse(serializedPairing) : void 0;
    return { account, pairing };
  }
  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);
  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);
  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);
  function serialize(args, version = ConnectResponse2.currentVersion) {
    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);
  }
  ConnectResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  ConnectResponse2.deserialize = deserialize;
})(ConnectResponse || (ConnectResponse = {}));

// src/features/disconnect/request.ts
var DisconnectRequest;
((DisconnectRequest2) => {
  DisconnectRequest2.name = "disconnect";
  DisconnectRequest2.currentVersion = 1;
  function serialize(dappInfo) {
    return serializeWalletRequest({ dappInfo, name: DisconnectRequest2.name, version: DisconnectRequest2.currentVersion });
  }
  DisconnectRequest2.serialize = serialize;
  function deserialize(request) {
    return deserializeWalletRequest(request);
  }
  DisconnectRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === DisconnectRequest2.name && request.version === DisconnectRequest2.currentVersion;
  }
  DisconnectRequest2.isSerialized = isSerialized;
})(DisconnectRequest || (DisconnectRequest = {}));

// src/features/disconnect/response.ts
var DisconnectResponse;
((DisconnectResponse2) => {
  function serialize(args) {
    return serializeWalletResponse(args, () => {
    });
  }
  DisconnectResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, () => ({}));
  }
  DisconnectResponse2.deserialize = deserialize;
})(DisconnectResponse || (DisconnectResponse = {}));

// src/features/getConnectedAccounts/request.ts
var GetConnectedAccountsRequest;
((GetConnectedAccountsRequest2) => {
  GetConnectedAccountsRequest2.name = "getConnectedAccounts";
  GetConnectedAccountsRequest2.currentVersion = 1;
  function serialize(dappInfo) {
    return serializeWalletRequest({ dappInfo, name: GetConnectedAccountsRequest2.name, version: GetConnectedAccountsRequest2.currentVersion });
  }
  GetConnectedAccountsRequest2.serialize = serialize;
  function deserialize(request) {
    return deserializeWalletRequest(request);
  }
  GetConnectedAccountsRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === GetConnectedAccountsRequest2.name && request.version === GetConnectedAccountsRequest2.currentVersion;
  }
  GetConnectedAccountsRequest2.isSerialized = isSerialized;
})(GetConnectedAccountsRequest || (GetConnectedAccountsRequest = {}));

// src/features/getConnectedAccounts/response.ts
var GetConnectedAccountsResponse;
((GetConnectedAccountsResponse2) => {
  function serializeArgs(serializer, args) {
    serializer.serializeU32AsUleb128(args.length);
    for (const account of args) {
      serializeAccountInfo(serializer, account);
    }
  }
  function deserializeArgs(deserializer) {
    const length = deserializer.deserializeUleb128AsU32();
    const accounts = [];
    for (let i = 0; i < length; i += 1) {
      accounts.push(deserializeAccountInfo(deserializer));
    }
    return accounts;
  }
  function serialize(args) {
    return serializeWalletResponse(args, serializeArgs);
  }
  GetConnectedAccountsResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  GetConnectedAccountsResponse2.deserialize = deserialize;
})(GetConnectedAccountsResponse || (GetConnectedAccountsResponse = {}));

// src/features/isConnected/request.ts
var IsConnectedRequest;
((IsConnectedRequest2) => {
  IsConnectedRequest2.name = "isConnected";
  IsConnectedRequest2.currentVersion = 1;
  function serialize(dappInfo) {
    return serializeWalletRequest({ dappInfo, name: IsConnectedRequest2.name, version: IsConnectedRequest2.currentVersion });
  }
  IsConnectedRequest2.serialize = serialize;
  function deserialize(request) {
    return deserializeWalletRequest(request);
  }
  IsConnectedRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === IsConnectedRequest2.name && request.version === IsConnectedRequest2.currentVersion;
  }
  IsConnectedRequest2.isSerialized = isSerialized;
})(IsConnectedRequest || (IsConnectedRequest = {}));

// src/features/isConnected/response.ts
var IsConnectedResponse;
((IsConnectedResponse2) => {
  function serializeArgs(serializer, value) {
    serializer.serializeBool(value);
  }
  function deserializeArgs(deserializer) {
    return deserializer.deserializeBool();
  }
  function serialize(args) {
    return serializeWalletResponse(args, serializeArgs);
  }
  IsConnectedResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  IsConnectedResponse2.deserialize = deserialize;
})(IsConnectedResponse || (IsConnectedResponse = {}));

// src/features/signAndSubmitTransaction/request.ts
var import_ts_sdk11 = require("@aptos-labs/ts-sdk");
var SignAndSubmitTransactionRequest;
((SignAndSubmitTransactionRequest2) => {
  SignAndSubmitTransactionRequest2.name = "signAndSubmitTransaction";
  SignAndSubmitTransactionRequest2.supportedVersions = [1, 2, 3];
  SignAndSubmitTransactionRequest2.currentVersion = 3;
  function serializeArgs(serializer, value) {
    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {
      throw new Error(`Unsupported network '${value.network}'`);
    }
    serializer.serializeBool(value.signerAddress !== void 0);
    if (value.signerAddress !== void 0) {
      serializer.serialize(value.signerAddress);
    }
    serializer.serializeOptionStr(value.network);
    if ("bcsToBytes" in value.payload) {
      serializer.serializeBool(true);
      serializer.serialize(value.payload);
    } else {
      serializer.serializeBool(false);
      serializeTransactionPayloadInput(serializer, value.payload);
    }
    serializer.serializeU64(value.expirationTimestamp ?? 0);
    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);
    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);
    serializer.serializeU32AsUleb128(value.feePayer ? 1 : 0);
    if (value.feePayer) {
      serializeAccountAuthenticatorInput(serializer, value.feePayer);
    }
  }
  SignAndSubmitTransactionRequest2.serializeArgs = serializeArgs;
  function deserializeArgs(deserializer, version) {
    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();
    const signerAddress = hasSignerAddress ? deserializer.deserialize(import_ts_sdk11.AccountAddress) : void 0;
    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();
    if (network !== void 0 && !isSupportedNetwork(network)) {
      throw new Error(`Unsupported network '${network}'`);
    }
    const isPayloadBcsSerializable = version === 1 || deserializer.deserializeBool();
    const payload = isPayloadBcsSerializable ? deserializer.deserialize(import_ts_sdk11.TransactionPayload) : deserializeTransactionPayloadInput(deserializer);
    const expirationTimestamp = Number(deserializer.deserializeU64());
    const gasUnitPrice = deserializer.deserializeUleb128AsU32();
    const maxGasAmount = deserializer.deserializeUleb128AsU32();
    const hasFeePayer = deserializer.deserializeUleb128AsU32();
    const feePayer = hasFeePayer ? deserializeAccountAuthenticatorInput(deserializer) : void 0;
    return {
      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,
      feePayer,
      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,
      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,
      network,
      payload,
      signerAddress
    };
  }
  SignAndSubmitTransactionRequest2.deserializeArgs = deserializeArgs;
  function serialize(dappInfo, args) {
    const request = { args, dappInfo, name: SignAndSubmitTransactionRequest2.name, version: SignAndSubmitTransactionRequest2.currentVersion };
    return serializeWalletRequestWithArgs(request, serializeArgs);
  }
  SignAndSubmitTransactionRequest2.serialize = serialize;
  function deserialize(serializedRequest) {
    return deserializeWalletRequestWithArgs(
      serializedRequest,
      (deserializer) => deserializeArgs(deserializer, serializedRequest.version)
    );
  }
  SignAndSubmitTransactionRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === SignAndSubmitTransactionRequest2.name && SignAndSubmitTransactionRequest2.supportedVersions.includes(request.version);
  }
  SignAndSubmitTransactionRequest2.isSerialized = isSerialized;
})(SignAndSubmitTransactionRequest || (SignAndSubmitTransactionRequest = {}));

// src/features/signAndSubmitTransaction/response.ts
var SignAndSubmitTransactionResponse;
((SignAndSubmitTransactionResponse2) => {
  function serializeApprovalArgs(serializer, value) {
    serializer.serializeStr(value.txnHash);
  }
  function deserializeApprovalArgs(deserializer) {
    const txnHash = deserializer.deserializeStr();
    return { txnHash };
  }
  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);
  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);
  function serialize(args) {
    return serializeWalletResponse(args, serializeArgs);
  }
  SignAndSubmitTransactionResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  SignAndSubmitTransactionResponse2.deserialize = deserialize;
})(SignAndSubmitTransactionResponse || (SignAndSubmitTransactionResponse = {}));

// src/features/signMessage/request.ts
var import_ts_sdk12 = require("@aptos-labs/ts-sdk");
var SignMessageRequest;
((SignMessageRequest2) => {
  SignMessageRequest2.name = "signMessage";
  SignMessageRequest2.supportedVersions = [1, 2];
  SignMessageRequest2.currentVersion = 2;
  function serializeArgs(serializer, value) {
    serializer.serializeBool(value.signerAddress !== void 0);
    if (value.signerAddress !== void 0) {
      serializer.serialize(value.signerAddress);
    }
    serializer.serializeU8(value.chainId);
    serializer.serializeBytes(value.nonce);
    serializer.serializeBytes(value.message);
  }
  function deserializeArgs(deserializer, version) {
    const hasSignerAddress = version >= 2 && deserializer.deserializeBool();
    const signerAddress = hasSignerAddress ? deserializer.deserialize(import_ts_sdk12.AccountAddress) : void 0;
    const chainId = deserializer.deserializeU8();
    const nonce = deserializer.deserializeBytes();
    const message = deserializer.deserializeBytes();
    return { chainId, message, nonce, signerAddress };
  }
  function serialize(dappInfo, args) {
    const request = { args, dappInfo, name: SignMessageRequest2.name, version: SignMessageRequest2.currentVersion };
    return serializeWalletRequestWithArgs(request, serializeArgs);
  }
  SignMessageRequest2.serialize = serialize;
  function deserialize(serializedRequest) {
    return deserializeWalletRequestWithArgs(serializedRequest, (d) => deserializeArgs(d, serializedRequest.version));
  }
  SignMessageRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === SignMessageRequest2.name && request.version === SignMessageRequest2.currentVersion;
  }
  SignMessageRequest2.isSerialized = isSerialized;
})(SignMessageRequest || (SignMessageRequest = {}));

// src/features/signMessage/response.ts
var SignMessageResponse;
((SignMessageResponse2) => {
  function serializeApprovalArgs(serializer, value) {
    serializer.serializeStr(value.fullMessage);
    serializeSignature(serializer, value.signature);
  }
  function deserializeApprovalArgs(deserializer) {
    const fullMessage = deserializer.deserializeStr();
    const signature = deserializeSignature(deserializer);
    return { fullMessage, signature };
  }
  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);
  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);
  function serialize(args) {
    return serializeWalletResponse(args, serializeArgs);
  }
  SignMessageResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  SignMessageResponse2.deserialize = deserialize;
})(SignMessageResponse || (SignMessageResponse = {}));

// src/features/signTransaction/request.ts
var import_ts_sdk13 = require("@aptos-labs/ts-sdk");
var SignTransactionRequest;
((SignTransactionRequest2) => {
  SignTransactionRequest2.name = "signTransaction";
  SignTransactionRequest2.supportedVersions = [1, 2, 3];
  SignTransactionRequest2.currentVersion = 3;
  function normalizeArgs(args) {
    const { feePayer, secondarySigners, senderPublicKey, signerAddress, transaction } = args;
    const sender = {
      address: transaction.sender,
      publicKey: senderPublicKey
    };
    const network = chainIdToNetwork(args.transaction.chain_id.chainId);
    return {
      expirationTimestamp: Number(transaction.expiration_timestamp_secs),
      feePayer,
      gasUnitPrice: Number(transaction.gas_unit_price),
      maxGasAmount: Number(transaction.max_gas_amount),
      network,
      payload: transaction.payload,
      secondarySigners,
      sender,
      signerAddress
    };
  }
  SignTransactionRequest2.normalizeArgs = normalizeArgs;
  function serializeArgs(serializer, value) {
    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {
      throw new Error(`Unsupported network '${value.network}'`);
    }
    serializer.serializeBool(value.signerAddress !== void 0);
    if (value.signerAddress !== void 0) {
      serializer.serialize(value.signerAddress);
    }
    serializer.serializeOptionStr(value.network);
    serializer.serializeBool(value.sender !== void 0);
    if (value.sender !== void 0) {
      serializeAccountInput(serializer, value.sender);
    }
    serializer.serialize(value.payload);
    serializer.serializeU32AsUleb128(value.expirationSecondsFromNow ?? 0);
    serializer.serializeU64(value.expirationTimestamp ?? 0);
    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);
    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);
    serializer.serializeBool(value.feePayer !== void 0);
    if (value.feePayer !== void 0) {
      serializeAccountInput(serializer, value.feePayer);
    }
    const secondarySigners = value.secondarySigners ?? [];
    serializer.serializeU32AsUleb128(secondarySigners.length);
    for (const signer of secondarySigners) {
      serializeAccountInput(serializer, signer);
    }
  }
  function deserializeArgs(deserializer, version) {
    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();
    const signerAddress = hasSignerAddress ? deserializer.deserialize(import_ts_sdk13.AccountAddress) : void 0;
    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();
    if (network !== void 0 && !isSupportedNetwork(network)) {
      throw new Error(`Unsupported network '${network}'`);
    }
    const hasSender = deserializer.deserializeBool();
    const sender = hasSender ? deserializeAccountInput(deserializer) : void 0;
    const payload = deserializer.deserialize(import_ts_sdk13.TransactionPayload);
    const expirationSecondsFromNow = deserializer.deserializeUleb128AsU32();
    const expirationTimestamp = Number(deserializer.deserializeU64());
    const gasUnitPrice = deserializer.deserializeUleb128AsU32();
    const maxGasAmount = deserializer.deserializeUleb128AsU32();
    const hasFeePayer = deserializer.deserializeBool();
    const feePayer = hasFeePayer ? deserializeAccountInput(deserializer) : void 0;
    const secondarySignersLength = deserializer.deserializeUleb128AsU32();
    const secondarySigners = [];
    for (let i = 0; i < secondarySignersLength; i += 1) {
      secondarySigners.push(deserializeAccountInput(deserializer));
    }
    return {
      expirationSecondsFromNow: expirationSecondsFromNow > 0 ? expirationSecondsFromNow : void 0,
      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,
      feePayer,
      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,
      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,
      network,
      payload,
      secondarySigners,
      sender,
      signerAddress
    };
  }
  function serialize(dappInfo, args) {
    const request = { args, dappInfo, name: SignTransactionRequest2.name, version: SignTransactionRequest2.currentVersion };
    return serializeWalletRequestWithArgs(request, serializeArgs);
  }
  SignTransactionRequest2.serialize = serialize;
  function deserialize(serializedRequest) {
    return deserializeWalletRequestWithArgs(
      serializedRequest,
      (deserializer) => deserializeArgs(deserializer, serializedRequest.version)
    );
  }
  SignTransactionRequest2.deserialize = deserialize;
  function isSerialized(request) {
    return request.name === SignTransactionRequest2.name && SignTransactionRequest2.supportedVersions.includes(request.version);
  }
  SignTransactionRequest2.isSerialized = isSerialized;
})(SignTransactionRequest || (SignTransactionRequest = {}));

// src/features/signTransaction/response.ts
var import_ts_sdk14 = require("@aptos-labs/ts-sdk");
var SignTransactionResponse;
((SignTransactionResponse2) => {
  function serializeApprovalArgs(serializer, value) {
    serializer.serialize(value.authenticator);
    serializer.serializeBool(value.rawTransaction !== void 0);
    if (value.rawTransaction !== void 0) {
      serializer.serialize(value.rawTransaction);
    }
  }
  function deserializeApprovalArgs(deserializer) {
    const authenticator = deserializer.deserialize(import_ts_sdk14.AccountAuthenticator);
    const hasRawTransaction = deserializer.deserializeBool();
    const rawTransaction = hasRawTransaction ? deserializer.deserialize(import_ts_sdk14.RawTransaction) : void 0;
    return {
      authenticator,
      rawTransaction
    };
  }
  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);
  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);
  function serialize(args) {
    return serializeWalletResponse(args, serializeArgs);
  }
  SignTransactionResponse2.serialize = serialize;
  function deserialize(serializedResponse) {
    return deserializeWalletResponse(serializedResponse, deserializeArgs);
  }
  SignTransactionResponse2.deserialize = deserialize;
})(SignTransactionResponse || (SignTransactionResponse = {}));

// src/messages/common.ts
function isTypedMessage(messageCls, message) {
  return message?.__messageType === messageCls.TYPE;
}

// src/messages/background.ts
var _AptosWalletRequestMessage = class _AptosWalletRequestMessage {
  constructor(nonce, serializedValue) {
    this.nonce = nonce;
    this.serializedValue = serializedValue;
    this.__messageType = _AptosWalletRequestMessage.TYPE;
  }
};
_AptosWalletRequestMessage.TYPE = "AptosWalletRequest";
var AptosWalletRequestMessage = _AptosWalletRequestMessage;
var _AptosWalletSuccessResponseMessage = class _AptosWalletSuccessResponseMessage {
  constructor(serializedValue, nonce) {
    this.serializedValue = serializedValue;
    this.nonce = nonce;
    this.__messageType = _AptosWalletSuccessResponseMessage.TYPE;
  }
};
_AptosWalletSuccessResponseMessage.TYPE = "AptosWalletSuccessResponseMessage";
var AptosWalletSuccessResponseMessage = _AptosWalletSuccessResponseMessage;
var _AptosWalletErrorResponseMessage = class _AptosWalletErrorResponseMessage {
  constructor(error, nonce) {
    this.error = error;
    this.nonce = nonce;
    this.__messageType = _AptosWalletErrorResponseMessage.TYPE;
  }
};
_AptosWalletErrorResponseMessage.TYPE = "AptosWalletErrorResponseMessage";
var AptosWalletErrorResponseMessage = _AptosWalletErrorResponseMessage;
function isAptosWalletResponseMessage(message) {
  return isTypedMessage(AptosWalletSuccessResponseMessage, message) || isTypedMessage(AptosWalletErrorResponseMessage, message);
}

// src/messages/prompt.ts
var import_ts_sdk15 = require("@aptos-labs/ts-sdk");
var _PromptOpenerPingRequestMessage = class _PromptOpenerPingRequestMessage {
  constructor() {
    this.__messageType = _PromptOpenerPingRequestMessage.TYPE;
  }
};
_PromptOpenerPingRequestMessage.TYPE = "PromptOpenerPingRequest";
var PromptOpenerPingRequestMessage = _PromptOpenerPingRequestMessage;
var _PromptOpenerPingResponseMessage = class _PromptOpenerPingResponseMessage {
  constructor() {
    this.__messageType = _PromptOpenerPingResponseMessage.TYPE;
  }
};
_PromptOpenerPingResponseMessage.TYPE = "PromptOpenerPingResponse";
var PromptOpenerPingResponseMessage = _PromptOpenerPingResponseMessage;
var _PromptApprovalResponseMessage = class _PromptApprovalResponseMessage {
  constructor(serializedValue) {
    this.serializedValue = serializedValue;
    this.__messageType = _PromptApprovalResponseMessage.TYPE;
  }
};
_PromptApprovalResponseMessage.TYPE = "PromptApprovalResponse";
var PromptApprovalResponseMessage = _PromptApprovalResponseMessage;
var _PromptUnauthorizedErrorMessage = class _PromptUnauthorizedErrorMessage {
  constructor() {
    this.__messageType = _PromptUnauthorizedErrorMessage.TYPE;
  }
};
_PromptUnauthorizedErrorMessage.TYPE = "PromptUnauthorizedError";
var PromptUnauthorizedErrorMessage = _PromptUnauthorizedErrorMessage;
function urlEncodeWalletRequest(request) {
  const serializer = new import_ts_sdk15.Serializer();
  serializer.serializeStr(request.name);
  serializer.serializeBytes(request.data);
  serializer.serializeStr(request.version.toString());
  return bytesToBase64(serializer.toUint8Array());
}
function urlDecodeWalletRequest(encodedRequest) {
  const deserializer = new import_ts_sdk15.Deserializer(base64ToBytes(encodedRequest));
  const name = deserializer.deserializeStr();
  const data = deserializer.deserializeBytes();
  let version;
  try {
    version = Number(deserializer.deserializeStr());
  } catch {
    version = 1;
  }
  return { data, name, version };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AptosWalletErrorResponseMessage,
  AptosWalletRequestMessage,
  AptosWalletSuccessResponseMessage,
  ConnectRequest,
  ConnectResponse,
  DisconnectRequest,
  DisconnectResponse,
  EntryFunctionArgumentVariant,
  GetConnectedAccountsRequest,
  GetConnectedAccountsResponse,
  IsConnectedRequest,
  IsConnectedResponse,
  PromptApprovalResponseMessage,
  PromptOpenerPingRequestMessage,
  PromptOpenerPingResponseMessage,
  PromptUnauthorizedErrorMessage,
  SignAndSubmitTransactionRequest,
  SignAndSubmitTransactionResponse,
  SignMessageRequest,
  SignMessageResponse,
  SignTransactionRequest,
  SignTransactionResponse,
  TransactionPayloadInputVariant,
  base64ToBytes,
  bytesToBase64,
  chainIdToNetwork,
  deserializeAccountAuthenticatorInput,
  deserializeAccountInfo,
  deserializeAccountInput,
  deserializeDappInfo,
  deserializeEntryFunctionArgument,
  deserializePublicKey,
  deserializeSignature,
  deserializeTransactionPayloadInput,
  deserializeWalletRequest,
  deserializeWalletRequestWithArgs,
  deserializeWalletResponse,
  isAptosWalletResponseMessage,
  isSupportedNetwork,
  isTypedMessage,
  makeUserApproval,
  makeUserResponseDeserializeFn,
  makeUserResponseSerializeFn,
  serializeAccountAuthenticatorInput,
  serializeAccountInfo,
  serializeAccountInput,
  serializeDappInfo,
  serializeEntryFunctionArgument,
  serializePublicKey,
  serializeSignature,
  serializeTransactionPayloadInput,
  serializeWalletRequest,
  serializeWalletRequestWithArgs,
  serializeWalletResponse,
  urlDecodeWalletRequest,
  urlEncodeWalletRequest
});
//# sourceMappingURL=index.js.map