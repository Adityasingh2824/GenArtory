"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _createStarExport(obj) { Object.keys(obj) .filter((key) => key !== "default" && key !== "__esModule") .forEach((key) => { if (exports.hasOwnProperty(key)) { return; } Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]}); }); } function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _core = require('@wallet-standard/core'); _createStarExport(_core);var _tssdk = require('@aptos-labs/ts-sdk');var m=class n extends _tssdk.Serializable{constructor({address:e,publicKey:t,ansName:s}){super();this.address=_tssdk.AccountAddress.from(e),this.publicKey=t,this.ansName=s}serialize(e){if(this.address.serialize(e),this.publicKey instanceof _tssdk.Ed25519PublicKey)e.serializeU32AsUleb128(_tssdk.SigningScheme.Ed25519);else if(this.publicKey instanceof _tssdk.MultiEd25519PublicKey)e.serializeU32AsUleb128(_tssdk.SigningScheme.MultiEd25519);else if(this.publicKey instanceof _tssdk.AnyPublicKey)e.serializeU32AsUleb128(_tssdk.SigningScheme.SingleKey);else if(this.publicKey instanceof _tssdk.MultiKey)e.serializeU32AsUleb128(_tssdk.SigningScheme.MultiKey);else throw new Error("Unsupported public key");this.publicKey.serialize(e),e.serializeStr(_nullishCoalesce(this.ansName, () => ("")))}static deserialize(e){let t=_tssdk.AccountAddress.deserialize(e),s=e.deserializeUleb128AsU32(),r;switch(s){case _tssdk.SigningScheme.Ed25519:r=_tssdk.Ed25519PublicKey.deserialize(e);break;case _tssdk.SigningScheme.MultiEd25519:r=_tssdk.MultiEd25519PublicKey.deserialize(e);break;case _tssdk.SigningScheme.SingleKey:r=_tssdk.AnyPublicKey.deserialize(e);break;case _tssdk.SigningScheme.MultiKey:r=_tssdk.MultiKey.deserialize(e);break;default:throw new Error(`Unknown variant index for WrappedPublicKey: ${s}`)}let d=e.deserializeStr()||void 0;return new n({address:t,publicKey:r,ansName:d})}};var y="aptos:devnet",f= exports.APTOS_TESTNET_CHAIN ="aptos:testnet",x= exports.APTOS_LOCALNET_CHAIN ="aptos:localnet",N= exports.APTOS_MAINNET_CHAIN ="aptos:mainnet",P= exports.APTOS_CHAINS =[y,f,x,N];var w=["aptos:account","aptos:connect","aptos:disconnect","aptos:network","aptos:onAccountChange","aptos:onNetworkChange","aptos:signMessage","aptos:signTransaction"];function k(n,p=[]){return[...w,...p].every(e=>e in n.features)}function K(){let{get:n,on:p}=_core.getWallets.call(void 0, ),e=n(),t=[];return e.map(s=>{k(s)&&t.push(s)}),{aptosWallets:t,on:p}}var C=(e=>(e[e.Unauthorized=4100]="Unauthorized",e[e.InternalError=-30001]="InternalError",e))(C||{}),l= exports.AptosWalletErrors =Object.freeze({4100:{status:"Unauthorized",message:"The requested method and/or account has not been authorized by the user."},[-30001]:{status:"Internal error",message:"Something went wrong within the wallet."}}),g= exports.AptosWalletError =class n extends Error{constructor(e,t){super(_nullishCoalesce(_nullishCoalesce(t, () => (_optionalChain([l, 'access', _2 => _2[e], 'optionalAccess', _3 => _3.message]))), () => ("Unknown error occurred")));this.code=e,this.status=_nullishCoalesce(_optionalChain([l, 'access', _4 => _4[e], 'optionalAccess', _5 => _5.status]), () => ("Unknown error")),this.name="AptosWalletError",Object.setPrototypeOf(this,n.prototype)}};var _="aptos:signAndSubmitTransaction";var H="aptos:signMessage";var L="aptos:account";var $="aptos:connect";var Q="aptos:network";var X="aptos:onAccountChange";var Z="aptos:onNetworkChange";var te="aptos:changeNetwork";var ne="aptos:disconnect";var re="aptos:signTransaction";var T=(e=>(e.APPROVED="Approved",e.REJECTED="Rejected",e))(T||{});exports.APTOS_CHAINS = P; exports.APTOS_DEVNET_CHAIN = y; exports.APTOS_LOCALNET_CHAIN = x; exports.APTOS_MAINNET_CHAIN = N; exports.APTOS_TESTNET_CHAIN = f; exports.AccountInfo = m; exports.AptosChangeNetworkNamespace = te; exports.AptosConnectNamespace = $; exports.AptosDisconnectNamespace = ne; exports.AptosGetAccountNamespace = L; exports.AptosGetNetworkNamespace = Q; exports.AptosOnAccountChangeNamespace = X; exports.AptosOnNetworkChangeNamespace = Z; exports.AptosSignAndSubmitTransactionNamespace = _; exports.AptosSignMessageNamespace = H; exports.AptosSignTransactionNamespace = re; exports.AptosWalletError = g; exports.AptosWalletErrorCode = C; exports.AptosWalletErrors = l; exports.UserResponseStatus = T; exports.getAptosWallets = K; exports.isWalletWithRequiredFeatureSet = k;
//# sourceMappingURL=index.js.map