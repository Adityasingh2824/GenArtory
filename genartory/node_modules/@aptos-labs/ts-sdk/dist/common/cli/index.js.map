{"version":3,"sources":["../../../src/cli/localNode.ts","../../../src/cli/move.ts"],"names":["spawn","kill","platform","LocalNode","cliCommand","cliArgs","currentPlatform","childProcess","data","str","operational","start","last","sleep","Move","args","network","profile","packageDirectoryPath","namedAddresses","addressesMap","resolve","reject","code","totalNames","newArgs","names","value","key","toAppend","address"],"mappings":"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","sourcesContent":["import { ChildProcessWithoutNullStreams, spawn } from \"child_process\";\nimport kill from \"tree-kill\";\nimport { platform } from \"os\";\n\nimport { sleep } from \"../utils/helpers\";\n\nexport class LocalNode {\n  readonly MAXIMUM_WAIT_TIME_SEC = 75;\n\n  readonly READINESS_ENDPOINT = \"http://127.0.0.1:8070/\";\n\n  process: ChildProcessWithoutNullStreams | null = null;\n\n  /**\n   * kills all the descendent processes\n   * of the node process, including the node process itself\n   */\n  stop() {\n    if (!this.process?.pid) return;\n    kill(this.process.pid);\n  }\n\n  /**\n   * Runs a local testnet and waits for process to be up.\n   *\n   * If local node process is already up it returns and does\n   * not start the process\n   */\n  async run() {\n    const nodeIsUp = await this.checkIfProcessIsUp();\n    if (nodeIsUp) {\n      return;\n    }\n    this.start();\n    await this.waitUntilProcessIsUp();\n  }\n\n  /**\n   * Starts the local testnet by running the aptos node run-local-testnet command\n   */\n  start() {\n    const cliCommand = \"npx\";\n    const cliArgs = [\"aptos\", \"node\", \"run-local-testnet\", \"--force-restart\", \"--assume-yes\", \"--with-indexer-api\"];\n\n    const currentPlatform = platform();\n    let childProcess;\n    // Check if current OS is windows\n    if (currentPlatform === \"win32\") {\n      childProcess = spawn(cliCommand, cliArgs, { shell: true });\n    } else {\n      childProcess = spawn(cliCommand, cliArgs);\n    }\n\n    this.process = childProcess;\n\n    childProcess.stderr?.on(\"data\", (data: any) => {\n      const str = data.toString();\n      // Print local node output log\n      // eslint-disable-next-line no-console\n      console.log(str);\n    });\n\n    childProcess.stdout?.on(\"data\", (data: any) => {\n      const str = data.toString();\n      // Print local node output log\n      // eslint-disable-next-line no-console\n      console.log(str);\n    });\n  }\n\n  /**\n   * Waits for the local testnet process to be up\n   *\n   * @returns Promise<boolean>\n   */\n  async waitUntilProcessIsUp(): Promise<boolean> {\n    let operational = await this.checkIfProcessIsUp();\n    const start = Date.now() / 1000;\n    let last = start;\n\n    while (!operational && start + this.MAXIMUM_WAIT_TIME_SEC > last) {\n      // eslint-disable-next-line no-await-in-loop\n      await sleep(1000);\n      // eslint-disable-next-line no-await-in-loop\n      operational = await this.checkIfProcessIsUp();\n      last = Date.now() / 1000;\n    }\n\n    // If we are here it means something blocks the process to start.\n    // Might worth checking if another process is running on port 8080\n    if (!operational) {\n      throw new Error(\"Process failed to start\");\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks if the local testnet is up\n   *\n   * @returns Promise<boolean>\n   */\n  async checkIfProcessIsUp(): Promise<boolean> {\n    try {\n      // Query readiness endpoint\n      const data = await fetch(this.READINESS_ENDPOINT);\n      if (data.status === 200) {\n        return true;\n      }\n      return false;\n    } catch (err: any) {\n      return false;\n    }\n  }\n}\n","import { spawn } from \"child_process\";\nimport { platform } from \"os\";\n\nimport { AccountAddress } from \"../core\";\nimport { Network } from \"../utils\";\n\nexport class Move {\n  /**\n   * Function to initialize current directory for Aptos\n   *\n   * Configuration will be pushed into .aptos/config.yaml\n   * @param args.network optional Netowrk type argument to use for default settings, default is local\n   * @param args.profile optional Profile to use from the config file, default is 'default'\n   * This will be used to override associated settings such as the REST URL, the Faucet URL, and the private key arguments.\n   *\n   * @returns\n   */\n  async init(args: { network?: Network; profile?: string }): Promise<boolean> {\n    const { network, profile } = args;\n    const cliArgs = [\"aptos\", \"init\", `--network=${network ?? \"local\"}`, `--profile=${profile ?? \"default\"}`];\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to compile a package\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   *\n   * @returns\n   */\n  async compile(args: {\n    packageDirectoryPath: string;\n    namedAddresses: Record<string, AccountAddress>;\n  }): Promise<boolean> {\n    const { packageDirectoryPath, namedAddresses } = args;\n    const cliArgs = [\"aptos\", \"move\", \"compile\", \"--package-dir\", packageDirectoryPath];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to run Move unit tests for a package\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   *\n   * @returns\n   */\n  async test(args: { packageDirectoryPath: string; namedAddresses: Record<string, AccountAddress> }): Promise<boolean> {\n    const { packageDirectoryPath, namedAddresses } = args;\n    const cliArgs = [\"aptos\", \"move\", \"test\", \"--package-dir\", packageDirectoryPath];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Function to publishe the modules in a Move package to the Aptos blockchain\n   *\n   * @param args.packageDirectoryPath Path to a move package (the folder with a Move.toml file)\n   * @param args.namedAddresses  Named addresses for the move binary\n   * @example\n   * {\n   *  alice:0x1234, bob:0x5678\n   * }\n   * @param args.profile optional Profile to use from the config file.\n   *\n   * @returns\n   */\n  async publish(args: {\n    packageDirectoryPath: string;\n    namedAddresses: Record<string, AccountAddress>;\n    profile?: string;\n  }): Promise<boolean> {\n    const { packageDirectoryPath, namedAddresses, profile } = args;\n    const cliArgs = [\n      \"aptos\",\n      \"move\",\n      \"publish\",\n      \"--package-dir\",\n      packageDirectoryPath,\n      `--profile=${profile ?? \"default\"}`,\n    ];\n\n    const addressesMap = this.parseNamedAddresses(namedAddresses);\n\n    cliArgs.push(...this.prepareNamedAddresses(addressesMap));\n\n    return this.runCommand(cliArgs);\n  }\n\n  /**\n   * Run a move command\n   *\n   * @param args\n   * @returns\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private async runCommand(args: Array<string>): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      const currentPlatform = platform();\n      let childProcess;\n\n      // Check if current OS is windows\n      if (currentPlatform === \"win32\") {\n        childProcess = spawn(\"npx\", args, { shell: true });\n      } else {\n        childProcess = spawn(\"npx\", args);\n      }\n\n      childProcess.stdout.pipe(process.stdout);\n      childProcess.stderr.pipe(process.stderr);\n      process.stdin.pipe(childProcess.stdin);\n\n      childProcess.on(\"close\", (code) => {\n        if (code === 0) {\n          resolve(true); // Resolve with true if the child process exits successfully\n        } else {\n          reject(new Error(`Child process exited with code ${code}`)); // Reject with an error if the child process exits with an error code\n        }\n      });\n    });\n  }\n\n  /**\n   * Convert named addresses from a Map into an array seperated by a comma\n   *\n   * @example\n   * input: {'alice' => '0x123', 'bob' => '0x456'}\n   * output: \"alice=0x123,bob=0x456\"\n   *\n   * @param namedAddresses\n   * @returns An array of names addresses seperated by a comma\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private prepareNamedAddresses(namedAddresses: Map<string, AccountAddress>): Array<string> {\n    const totalNames = namedAddresses.size;\n    const newArgs: Array<string> = [];\n\n    if (totalNames === 0) {\n      return newArgs;\n    }\n\n    newArgs.push(\"--named-addresses\");\n\n    const names: Array<string> = [];\n    namedAddresses.forEach((value, key) => {\n      const toAppend = `${key}=${value.toString()}`;\n      names.push(toAppend);\n    });\n    newArgs.push(names.join(\",\"));\n    return newArgs;\n  }\n\n  /**\n   * Parse named addresses from a Record type into a Map\n   *\n   * @param namedAddresses\n   * @returns Map<name,address>\n   */\n  // eslint-disable-next-line class-methods-use-this\n  private parseNamedAddresses(namedAddresses: Record<string, AccountAddress>): Map<string, AccountAddress> {\n    const addressesMap = new Map();\n\n    Object.keys(namedAddresses).forEach((key) => {\n      const address = namedAddresses[key];\n      addressesMap.set(key, address);\n    });\n\n    return addressesMap;\n  }\n}\n"]}