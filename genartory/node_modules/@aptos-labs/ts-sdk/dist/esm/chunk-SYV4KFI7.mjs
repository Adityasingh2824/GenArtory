import{spawn as n}from"child_process";import{platform as c}from"os";var d=class{async init(e){let{network:o,profile:s}=e,r=["aptos","init",`--network=${o??"local"}`,`--profile=${s??"default"}`];return this.runCommand(r)}async compile(e){let{packageDirectoryPath:o,namedAddresses:s}=e,r=["aptos","move","compile","--package-dir",o],t=this.parseNamedAddresses(s);return r.push(...this.prepareNamedAddresses(t)),this.runCommand(r)}async test(e){let{packageDirectoryPath:o,namedAddresses:s}=e,r=["aptos","move","test","--package-dir",o],t=this.parseNamedAddresses(s);return r.push(...this.prepareNamedAddresses(t)),this.runCommand(r)}async publish(e){let{packageDirectoryPath:o,namedAddresses:s,profile:r}=e,t=["aptos","move","publish","--package-dir",o,`--profile=${r??"default"}`],a=this.parseNamedAddresses(s);return t.push(...this.prepareNamedAddresses(a)),this.runCommand(t)}async runCommand(e){return new Promise((o,s)=>{let r=c(),t;r==="win32"?t=n("npx",e,{shell:!0}):t=n("npx",e),t.stdout.pipe(process.stdout),t.stderr.pipe(process.stderr),process.stdin.pipe(t.stdin),t.on("close",a=>{a===0?o(!0):s(new Error(`Child process exited with code ${a}`))})})}prepareNamedAddresses(e){let o=e.size,s=[];if(o===0)return s;s.push("--named-addresses");let r=[];return e.forEach((t,a)=>{let i=`${a}=${t.toString()}`;r.push(i)}),s.push(r.join(",")),s}parseNamedAddresses(e){let o=new Map;return Object.keys(e).forEach(s=>{let r=e[s];o.set(s,r)}),o}};export{d as a};
//# sourceMappingURL=chunk-SYV4KFI7.mjs.map