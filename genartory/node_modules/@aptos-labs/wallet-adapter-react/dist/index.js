"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  APTOS_PRIVACY_POLICY_URL: () => APTOS_PRIVACY_POLICY_URL,
  AptosPrivacyPolicy: () => AptosPrivacyPolicy,
  AptosWalletAdapterProvider: () => AptosWalletAdapterProvider,
  WalletContext: () => WalletContext,
  WalletItem: () => WalletItem,
  useWallet: () => useWallet
});
module.exports = __toCommonJS(src_exports);
__reExport(src_exports, require("@aptos-labs/wallet-adapter-core"), module.exports);

// src/WalletProvider.tsx
var import_react2 = require("react");

// src/useWallet.tsx
var import_react = require("react");
var DEFAULT_CONTEXT = {
  connected: false
};
var WalletContext = (0, import_react.createContext)(
  DEFAULT_CONTEXT
);
function useWallet() {
  const context = (0, import_react.useContext)(WalletContext);
  if (!context) {
    throw new Error("useWallet must be used within a WalletContextState");
  }
  return context;
}

// src/WalletProvider.tsx
var import_wallet_adapter_core = require("@aptos-labs/wallet-adapter-core");
var import_jsx_runtime = require("react/jsx-runtime");
var initialState = {
  connected: false,
  account: null,
  network: null,
  wallet: null
};
var AptosWalletAdapterProvider = ({
  children,
  plugins,
  optInWallets,
  autoConnect = false,
  dappConfig,
  onError
}) => {
  const [{ connected, account, network, wallet }, setState] = (0, import_react2.useState)(initialState);
  const [isLoading, setIsLoading] = (0, import_react2.useState)(true);
  const walletCore = (0, import_react2.useMemo)(
    () => new import_wallet_adapter_core.WalletCore(plugins != null ? plugins : [], optInWallets != null ? optInWallets : [], dappConfig),
    []
  );
  const [wallets, setWallets] = (0, import_react2.useState)(walletCore.wallets);
  const connect = async (walletName) => {
    try {
      setIsLoading(true);
      await walletCore.connect(walletName);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
    }
  };
  const disconnect = async () => {
    try {
      await walletCore.disconnect();
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signTransaction = async (transaction, asFeePayer, options) => {
    try {
      return await walletCore.signTransaction(transaction, asFeePayer, options);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signMessage = async (message) => {
    try {
      return await walletCore.signMessage(message);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signMessageAndVerify = async (message) => {
    try {
      return await walletCore.signMessageAndVerify(message);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const submitTransaction = async (transaction) => {
    try {
      return await walletCore.submitTransaction(transaction);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signAndSubmitTransaction = async (transaction) => {
    try {
      return await walletCore.signAndSubmitTransaction(transaction);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const changeNetwork = async (network2) => {
    try {
      return await walletCore.changeNetwork(network2);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  (0, import_react2.useEffect)(() => {
    if (autoConnect) {
      if (localStorage.getItem("AptosWalletName") && !connected) {
        connect(localStorage.getItem("AptosWalletName"));
      } else {
        setIsLoading(false);
      }
    }
  }, [autoConnect, wallets]);
  (0, import_react2.useEffect)(() => {
    if (connected) {
      walletCore.onAccountChange();
      walletCore.onNetworkChange();
    }
  }, [connected]);
  const handleConnect = () => {
    setState((state) => {
      return {
        ...state,
        connected: true,
        account: walletCore.account,
        network: walletCore.network,
        wallet: walletCore.wallet
      };
    });
  };
  const handleDisconnect = () => {
    if (!connected)
      return;
    setState((state) => {
      return {
        ...state,
        connected: false,
        account: walletCore.account,
        network: walletCore.network,
        wallet: null
      };
    });
  };
  const handleAccountChange = (0, import_react2.useCallback)(() => {
    if (!connected)
      return;
    if (!walletCore.wallet)
      return;
    setState((state) => {
      return {
        ...state,
        account: walletCore.account
      };
    });
  }, [connected]);
  const handleNetworkChange = (0, import_react2.useCallback)(() => {
    if (!connected)
      return;
    if (!walletCore.wallet)
      return;
    setState((state) => {
      return {
        ...state,
        network: walletCore.network
      };
    });
  }, [connected]);
  const handleReadyStateChange = (updatedWallet) => {
    const updatedWallets = wallets == null ? void 0 : wallets.map((wallet2) => {
      if (wallet2.name === updatedWallet.name) {
        return { ...wallet2, readyState: updatedWallet.readyState };
      }
      return wallet2;
    });
    setWallets(updatedWallets);
  };
  const handleStandardWalletsAdded = (standardWallet) => {
    const existingWalletIndex = wallets.findIndex(
      (wallet2) => wallet2.name == standardWallet.name
    );
    if (existingWalletIndex !== -1) {
      setWallets((wallets2) => [
        ...wallets2.slice(0, existingWalletIndex),
        standardWallet,
        ...wallets2.slice(existingWalletIndex + 1)
      ]);
    } else {
      setWallets((wallets2) => [...wallets2, standardWallet]);
    }
  };
  (0, import_react2.useEffect)(() => {
    walletCore.on("connect", handleConnect);
    walletCore.on("disconnect", handleDisconnect);
    walletCore.on("accountChange", handleAccountChange);
    walletCore.on("networkChange", handleNetworkChange);
    walletCore.on("readyStateChange", handleReadyStateChange);
    walletCore.on("standardWalletsAdded", handleStandardWalletsAdded);
    return () => {
      walletCore.off("connect", handleConnect);
      walletCore.off("disconnect", handleDisconnect);
      walletCore.off("accountChange", handleAccountChange);
      walletCore.off("networkChange", handleNetworkChange);
      walletCore.off("readyStateChange", handleReadyStateChange);
      walletCore.off("standardWalletsAdded", handleStandardWalletsAdded);
    };
  }, [wallets, connected]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WalletContext.Provider, {
    value: {
      connect,
      account,
      network,
      connected,
      disconnect,
      wallet,
      wallets,
      signAndSubmitTransaction,
      signTransaction,
      signMessage,
      signMessageAndVerify,
      isLoading,
      submitTransaction,
      changeNetwork
    },
    children
  });
};

// src/components/AptosPrivacyPolicy.tsx
var import_react_slot = require("@radix-ui/react-slot");
var import_react3 = require("react");

// src/graphics/SmallAptosLogo.tsx
var import_jsx_runtime = require("react/jsx-runtime");
function SmallAptosLogo(props) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", {
    width: "12",
    height: "12",
    viewBox: "0 0 12 12",
    fill: "none",
    ...props,
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6 12C9.31371 12 12 9.31371 12 6C12 2.68629 9.31371 0 6 0C2.68629 0 0 2.68629 0 6C0 9.31371 2.68629 12 6 12ZM7.17547 3.67976C7.13401 3.72309 7.07649 3.74757 7.01648 3.74757H3.00775C3.69185 2.83824 4.77995 2.25 6.00569 2.25C7.23142 2.25 8.31953 2.83824 9.00362 3.74757H8.28524C8.20824 3.74757 8.13498 3.71468 8.08401 3.65701L7.81608 3.35416C7.77618 3.30896 7.71882 3.28308 7.6585 3.28308H7.6454C7.58805 3.28308 7.53318 3.30646 7.49343 3.34792L7.17547 3.67976ZM8.05656 4.75897H7.39569C7.31869 4.75897 7.24543 4.72593 7.19447 4.66842L6.92638 4.36557C6.88647 4.32036 6.82896 4.29465 6.7688 4.29465C6.70863 4.29465 6.65112 4.32052 6.61121 4.36557L6.38131 4.6254C6.30603 4.71034 6.19801 4.75913 6.08454 4.75913H2.46703C2.36401 5.05278 2.29683 5.36296 2.27002 5.68467H5.68505C5.74506 5.68467 5.80258 5.66019 5.84404 5.61686L6.16201 5.28502C6.20175 5.24356 6.25662 5.22018 6.31398 5.22018H6.32707C6.38739 5.22018 6.44475 5.24606 6.48465 5.29126L6.75258 5.59411C6.80355 5.65178 6.87681 5.68467 6.95381 5.68467H9.74133C9.71452 5.3628 9.64734 5.05263 9.54431 4.75913H8.05641L8.05656 4.75897ZM4.33651 7.63095C4.39652 7.63095 4.45404 7.60648 4.4955 7.56315L4.81347 7.23131C4.85321 7.18985 4.90808 7.16647 4.96544 7.16647H4.97853C5.03885 7.16647 5.09621 7.19234 5.13611 7.23739L5.40404 7.54024C5.45501 7.59791 5.52827 7.6308 5.60527 7.6308H9.38285C9.52438 7.33839 9.62803 7.02463 9.68975 6.69591H6.06383C5.98683 6.69591 5.91357 6.66287 5.8626 6.60535L5.59467 6.3025C5.55477 6.2573 5.49725 6.23158 5.43709 6.23158C5.37692 6.23158 5.31941 6.25746 5.27951 6.3025L5.0496 6.56233C4.97432 6.64728 4.86631 6.69606 4.75268 6.69606H2.32147C2.3832 7.02479 2.487 7.33855 2.62837 7.63095H4.33651ZM5.57359 8.55745H4.59116C4.51417 8.55745 4.44091 8.52441 4.38994 8.46689L4.12201 8.16404C4.0821 8.11884 4.02459 8.09312 3.96442 8.09312C3.90426 8.09312 3.84675 8.119 3.80684 8.16404L3.57694 8.42387C3.50166 8.50882 3.39364 8.55761 3.28001 8.55761H3.26474C3.94915 9.29096 4.92378 9.74998 6.00596 9.74998C7.08815 9.74998 8.06262 9.29096 8.74719 8.55761H5.57359V8.55745Z",
      fill: "currentColor"
    })
  });
}

// src/components/AptosPrivacyPolicy.tsx
var import_jsx_runtime = require("react/jsx-runtime");
var APTOS_PRIVACY_POLICY_URL = "https://aptoslabs.com/privacy";
var Root = (0, import_react3.forwardRef)(
  ({ className, asChild, children }, ref) => {
    const Component = asChild ? import_react_slot.Slot : "div";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
      ref,
      className,
      children
    });
  }
);
Root.displayName = "AptosPrivacyPolicy.Root";
var Disclaimer = (0, import_react3.forwardRef)(
  ({ className, asChild, children }, ref) => {
    const Component = asChild ? import_react_slot.Slot : "span";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
      ref,
      className,
      children: children != null ? children : "By continuing, you agree to Aptos Labs'"
    });
  }
);
Disclaimer.displayName = "AptosPrivacyPolicy.Disclaimer";
var Link = (0, import_react3.forwardRef)(
  ({ className, asChild, children }, ref) => {
    const Component = asChild ? import_react_slot.Slot : "a";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
      ref,
      className,
      href: APTOS_PRIVACY_POLICY_URL,
      target: "_blank",
      rel: "noopener noreferrer",
      children: children != null ? children : "Privacy Policy"
    });
  }
);
Link.displayName = "AptosPrivacyPolicy.Link";
var PoweredBy = (0, import_react3.forwardRef)(({ className }, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", {
    ref,
    className,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: "Powered by"
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SmallAptosLogo, {}),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", {
        children: "Aptos Labs"
      })
    ]
  });
});
PoweredBy.displayName = "AptosPrivacyPolicy.PoweredBy";
var AptosPrivacyPolicy = Object.assign(Root, {
  Disclaimer,
  Link,
  PoweredBy
});

// src/components/WalletItem.tsx
var import_wallet_adapter_core2 = require("@aptos-labs/wallet-adapter-core");
var import_react_slot2 = require("@radix-ui/react-slot");
var import_react4 = require("react");
var import_jsx_runtime = require("react/jsx-runtime");
var WalletItemContext = (0, import_react4.createContext)(null);
var WalletItemRoot = (0, import_react4.forwardRef)(
  ({ wallet, onConnect, className, asChild, children }, ref) => {
    const { connect } = useWallet();
    const connectWallet = (0, import_react4.useCallback)(() => {
      connect(wallet.name);
      onConnect == null ? void 0 : onConnect();
    }, [connect, wallet.name, onConnect]);
    const isWalletReady = wallet.readyState === import_wallet_adapter_core2.WalletReadyState.Installed || wallet.readyState === import_wallet_adapter_core2.WalletReadyState.Loadable;
    const mobileSupport = "deeplinkProvider" in wallet && wallet.deeplinkProvider;
    if (!isWalletReady && (0, import_wallet_adapter_core2.isRedirectable)() && !mobileSupport)
      return null;
    const Component = asChild ? import_react_slot2.Slot : "div";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(WalletItemContext.Provider, {
      value: { wallet, connectWallet },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
        ref,
        className,
        children
      })
    });
  }
);
WalletItemRoot.displayName = "WalletItem";
var WalletItemIcon = (0, import_react4.forwardRef)(
  ({ className, asChild, children }, ref) => {
    const context = (0, import_react4.useContext)(WalletItemContext);
    if (!context) {
      throw new Error("`WalletItem.Icon` must be used within `WalletItem`");
    }
    const Component = asChild ? import_react_slot2.Slot : "img";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
      ref,
      src: context.wallet.icon,
      alt: `${context.wallet.name} icon`,
      className,
      children
    });
  }
);
WalletItemIcon.displayName = "WalletItem.Icon";
var WalletItemName = (0, import_react4.forwardRef)(
  ({ className, asChild, children }, ref) => {
    const context = (0, import_react4.useContext)(WalletItemContext);
    if (!context) {
      throw new Error("`WalletItem.Name` must be used within `WalletItem`");
    }
    const Component = asChild ? import_react_slot2.Slot : "div";
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
      ref,
      className,
      children: children != null ? children : context.wallet.name
    });
  }
);
WalletItemName.displayName = "WalletItem.Name";
var WalletItemConnectButton = (0, import_react4.forwardRef)(({ className, asChild, children }, ref) => {
  const context = (0, import_react4.useContext)(WalletItemContext);
  if (!context) {
    throw new Error(
      "`WalletItem.ConnectButton` must be used within `WalletItem`"
    );
  }
  const Component = asChild ? import_react_slot2.Slot : "button";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
    ref,
    className,
    onClick: context.connectWallet,
    children: children != null ? children : "Connect"
  });
});
WalletItemConnectButton.displayName = "WalletItem.ConnectButton";
var WalletItemInstallLink = (0, import_react4.forwardRef)(({ className, asChild, children }, ref) => {
  const context = (0, import_react4.useContext)(WalletItemContext);
  if (!context) {
    throw new Error(
      "`WalletItem.InstallLink` must be used within `WalletItem`"
    );
  }
  const Component = asChild ? import_react_slot2.Slot : "a";
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Component, {
    ref,
    className,
    href: context.wallet.url,
    target: "_blank",
    rel: "noopener noreferrer",
    children: children != null ? children : "Install"
  });
});
WalletItemInstallLink.displayName = "WalletItem.InstallLink";
var WalletItem = Object.assign(WalletItemRoot, {
  Icon: WalletItemIcon,
  Name: WalletItemName,
  ConnectButton: WalletItemConnectButton,
  InstallLink: WalletItemInstallLink
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  APTOS_PRIVACY_POLICY_URL,
  AptosPrivacyPolicy,
  AptosWalletAdapterProvider,
  WalletContext,
  WalletItem,
  useWallet
});
//# sourceMappingURL=index.js.map