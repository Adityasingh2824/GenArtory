// src/index.tsx
export * from "@aptos-labs/wallet-adapter-core";

// src/WalletItem.tsx
import {
  WalletReadyState,
  isRedirectable
} from "@aptos-labs/wallet-adapter-core";
import { Slot } from "@radix-ui/react-slot";
import {
  createContext as createContext2,
  forwardRef,
  useCallback,
  useContext as useContext2
} from "react";

// src/useWallet.tsx
import { createContext, useContext } from "react";
var DEFAULT_CONTEXT = {
  connected: false
};
var WalletContext = createContext(
  DEFAULT_CONTEXT
);
function useWallet() {
  const context = useContext(WalletContext);
  if (!context) {
    throw new Error("useWallet must be used within a WalletContextState");
  }
  return context;
}

// src/WalletItem.tsx
import { jsx } from "react/jsx-runtime";
var WalletItemContext = createContext2(null);
var WalletItemRoot = forwardRef(
  ({ wallet, onConnect, className, asChild, children }, ref) => {
    const { connect } = useWallet();
    const connectWallet = useCallback(() => {
      connect(wallet.name);
      onConnect == null ? void 0 : onConnect();
    }, [connect, wallet.name, onConnect]);
    const isWalletReady = wallet.readyState === WalletReadyState.Installed || wallet.readyState === WalletReadyState.Loadable;
    const mobileSupport = "deeplinkProvider" in wallet && wallet.deeplinkProvider;
    if (!isWalletReady && isRedirectable() && !mobileSupport)
      return null;
    const Component = asChild ? Slot : "div";
    return /* @__PURE__ */ jsx(WalletItemContext.Provider, {
      value: { wallet, connectWallet },
      children: /* @__PURE__ */ jsx(Component, {
        ref,
        className,
        children
      })
    });
  }
);
WalletItemRoot.displayName = "WalletItem";
var WalletItemIcon = forwardRef(
  ({ className, asChild, children }, ref) => {
    const context = useContext2(WalletItemContext);
    if (!context) {
      throw new Error("`WalletItem.Icon` must be used within `WalletItem`");
    }
    const Component = asChild ? Slot : "img";
    return /* @__PURE__ */ jsx(Component, {
      ref,
      src: context.wallet.icon,
      alt: `${context.wallet.name} icon`,
      className,
      children
    });
  }
);
WalletItemIcon.displayName = "WalletItem.Icon";
var WalletItemName = forwardRef(
  ({ className, asChild, children }, ref) => {
    const context = useContext2(WalletItemContext);
    if (!context) {
      throw new Error("`WalletItem.Name` must be used within `WalletItem`");
    }
    const Component = asChild ? Slot : "div";
    return /* @__PURE__ */ jsx(Component, {
      ref,
      className,
      children: children != null ? children : context.wallet.name
    });
  }
);
WalletItemName.displayName = "WalletItem.Name";
var WalletItemConnectButton = forwardRef(({ className, asChild, children }, ref) => {
  const context = useContext2(WalletItemContext);
  if (!context) {
    throw new Error(
      "`WalletItem.ConnectButton` must be used within `WalletItem`"
    );
  }
  const Component = asChild ? Slot : "button";
  return /* @__PURE__ */ jsx(Component, {
    ref,
    className,
    onClick: context.connectWallet,
    children: children != null ? children : "Connect"
  });
});
WalletItemConnectButton.displayName = "WalletItem.ConnectButton";
var WalletItemInstallLink = forwardRef(({ className, asChild, children }, ref) => {
  const context = useContext2(WalletItemContext);
  if (!context) {
    throw new Error(
      "`WalletItem.InstallLink` must be used within `WalletItem`"
    );
  }
  const Component = asChild ? Slot : "a";
  return /* @__PURE__ */ jsx(Component, {
    ref,
    className,
    href: context.wallet.url,
    target: "_blank",
    rel: "noopener noreferrer",
    children: children != null ? children : "Install"
  });
});
WalletItemInstallLink.displayName = "WalletItem.InstallLink";
var WalletItem = Object.assign(WalletItemRoot, {
  Icon: WalletItemIcon,
  Name: WalletItemName,
  ConnectButton: WalletItemConnectButton,
  InstallLink: WalletItemInstallLink
});

// src/WalletProvider.tsx
import {
  useCallback as useCallback2,
  useEffect,
  useMemo,
  useState
} from "react";
import { WalletCore } from "@aptos-labs/wallet-adapter-core";
import { jsx as jsx2 } from "react/jsx-runtime";
var initialState = {
  connected: false,
  account: null,
  network: null,
  wallet: null
};
var AptosWalletAdapterProvider = ({
  children,
  plugins,
  optInWallets,
  autoConnect = false,
  dappConfig,
  onError
}) => {
  const [{ connected, account, network, wallet }, setState] = useState(initialState);
  const [isLoading, setIsLoading] = useState(true);
  const walletCore = useMemo(
    () => new WalletCore(plugins != null ? plugins : [], optInWallets != null ? optInWallets : [], dappConfig),
    []
  );
  const [wallets, setWallets] = useState(walletCore.wallets);
  const connect = async (walletName) => {
    try {
      setIsLoading(true);
      await walletCore.connect(walletName);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    } finally {
      setIsLoading(false);
    }
  };
  const disconnect = async () => {
    try {
      await walletCore.disconnect();
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signTransaction = async (transaction, asFeePayer, options) => {
    try {
      return await walletCore.signTransaction(transaction, asFeePayer, options);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signMessage = async (message) => {
    try {
      return await walletCore.signMessage(message);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signMessageAndVerify = async (message) => {
    try {
      return await walletCore.signMessageAndVerify(message);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const submitTransaction = async (transaction) => {
    try {
      return await walletCore.submitTransaction(transaction);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const signAndSubmitTransaction = async (transaction) => {
    try {
      return await walletCore.signAndSubmitTransaction(transaction);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  const changeNetwork = async (network2) => {
    try {
      return await walletCore.changeNetwork(network2);
    } catch (error) {
      if (onError)
        onError(error);
      return Promise.reject(error);
    }
  };
  useEffect(() => {
    if (autoConnect) {
      if (localStorage.getItem("AptosWalletName") && !connected) {
        connect(localStorage.getItem("AptosWalletName"));
      } else {
        setIsLoading(false);
      }
    }
  }, [autoConnect, wallets]);
  useEffect(() => {
    if (connected) {
      walletCore.onAccountChange();
      walletCore.onNetworkChange();
    }
  }, [connected]);
  const handleConnect = () => {
    setState((state) => {
      return {
        ...state,
        connected: true,
        account: walletCore.account,
        network: walletCore.network,
        wallet: walletCore.wallet
      };
    });
  };
  const handleDisconnect = () => {
    if (!connected)
      return;
    setState((state) => {
      return {
        ...state,
        connected: false,
        account: walletCore.account,
        network: walletCore.network,
        wallet: null
      };
    });
  };
  const handleAccountChange = useCallback2(() => {
    if (!connected)
      return;
    if (!walletCore.wallet)
      return;
    setState((state) => {
      return {
        ...state,
        account: walletCore.account
      };
    });
  }, [connected]);
  const handleNetworkChange = useCallback2(() => {
    if (!connected)
      return;
    if (!walletCore.wallet)
      return;
    setState((state) => {
      return {
        ...state,
        network: walletCore.network
      };
    });
  }, [connected]);
  const handleReadyStateChange = (updatedWallet) => {
    const updatedWallets = wallets == null ? void 0 : wallets.map((wallet2) => {
      if (wallet2.name === updatedWallet.name) {
        return { ...wallet2, readyState: updatedWallet.readyState };
      }
      return wallet2;
    });
    setWallets(updatedWallets);
  };
  const handleStandardWalletsAdded = (standardWallet) => {
    const existingWalletIndex = wallets.findIndex(
      (wallet2) => wallet2.name == standardWallet.name
    );
    if (existingWalletIndex !== -1) {
      setWallets((wallets2) => [
        ...wallets2.slice(0, existingWalletIndex),
        standardWallet,
        ...wallets2.slice(existingWalletIndex + 1)
      ]);
    } else {
      setWallets((wallets2) => [...wallets2, standardWallet]);
    }
  };
  useEffect(() => {
    walletCore.on("connect", handleConnect);
    walletCore.on("disconnect", handleDisconnect);
    walletCore.on("accountChange", handleAccountChange);
    walletCore.on("networkChange", handleNetworkChange);
    walletCore.on("readyStateChange", handleReadyStateChange);
    walletCore.on("standardWalletsAdded", handleStandardWalletsAdded);
    return () => {
      walletCore.off("connect", handleConnect);
      walletCore.off("disconnect", handleDisconnect);
      walletCore.off("accountChange", handleAccountChange);
      walletCore.off("networkChange", handleNetworkChange);
      walletCore.off("readyStateChange", handleReadyStateChange);
      walletCore.off("standardWalletsAdded", handleStandardWalletsAdded);
    };
  }, [wallets, connected]);
  return /* @__PURE__ */ jsx2(WalletContext.Provider, {
    value: {
      connect,
      account,
      network,
      connected,
      disconnect,
      wallet,
      wallets,
      signAndSubmitTransaction,
      signTransaction,
      signMessage,
      signMessageAndVerify,
      isLoading,
      submitTransaction,
      changeNetwork
    },
    children
  });
};

// src/utils.tsx
import {
  WalletReadyState as WalletReadyState2,
  isRedirectable as isRedirectable2
} from "@aptos-labs/wallet-adapter-core";
function partitionWallets(wallets, partitionFunction = isInstalledOrLoadable) {
  const defaultWallets = [];
  const moreWallets = [];
  for (const wallet of wallets) {
    if (partitionFunction(wallet))
      defaultWallets.push(wallet);
    else
      moreWallets.push(wallet);
  }
  return { defaultWallets, moreWallets };
}
function isInstalledOrLoadable(wallet) {
  return wallet.readyState === WalletReadyState2.Installed || wallet.readyState === WalletReadyState2.Loadable;
}
function getAptosConnectWallets(wallets) {
  const { defaultWallets, moreWallets } = partitionWallets(
    wallets,
    (wallet) => wallet.url.includes("aptosconnect.app")
  );
  return { aptosConnectWallets: defaultWallets, otherWallets: moreWallets };
}
function isInstallRequired(wallet) {
  const isWalletReady = isInstalledOrLoadable(wallet);
  const isMobile = !isWalletReady && isRedirectable2();
  return !isMobile && !isWalletReady;
}
function truncateAddress(address) {
  if (!address)
    return;
  return `${address.slice(0, 6)}...${address.slice(-5)}`;
}
export {
  AptosWalletAdapterProvider,
  WalletContext,
  WalletItem,
  getAptosConnectWallets,
  isInstallRequired,
  isInstalledOrLoadable,
  partitionWallets,
  truncateAddress,
  useWallet
};
//# sourceMappingURL=index.mjs.map