import type BigNumber from "bignumber.js";
import type Irys from "./irys.js";
import type { StringifiedNumber, UnixEpochMs, UploadResponse } from "./types.js";
export declare class Approval {
    protected irys: Irys;
    constructor(irys: Irys);
    getApprovals({ payingAddresses, tokens, approvedAddresses, }: {
        payingAddresses?: string[];
        tokens?: string[];
        approvedAddresses?: string[];
    }): Promise<{
        amount: string;
        payingAddress: string;
        approvedAddress: string;
        expiresBy: number;
        timestamp: number;
        token: string;
    }[]>;
    getCreatedApprovals({ payingAddresses, tokens, approvedAddresses, }: {
        payingAddresses?: string[];
        tokens?: string[];
        approvedAddresses?: string[];
    }): Promise<{
        amount: string;
        payingAddress: string;
        approvedAddress: string;
        expiresBy: number;
        timestamp: number;
        token: string;
    }[]>;
    get queryApproval(): import("@irys/query/node").BuilderMethods<import("@irys/query/node").IrysPaymentApprovalVars, import("@irys/query/node").GraphQLQuery<{
        amount: string;
        payingAddress: string;
        approvedAddress: string;
        expiresBy: number;
        timestamp: number;
        token: string;
    }, import("@irys/query/node").IrysPaymentApprovalVars, {
        amount: string;
        payingAddress: string;
        approvedAddress: string;
        expiresBy: number;
        timestamp: number;
        token: string;
    }[]>>;
    getApproval({ payingAddress, token, approvedAddress, }: {
        payingAddress?: string;
        token?: string;
        approvedAddress: string;
    }): Promise<GetApprovedBalanceResponseBody>;
    getApprovedBalanceFrom(payingAddress: string): Promise<GetApprovedBalanceResponseBody>;
    createApproval({ approvedAddress, amount, expiresInSeconds, }: {
        approvedAddress: string;
        amount: string | number | BigNumber;
        expiresInSeconds?: number | string;
    }): Promise<UploadResponse>;
    revokeApproval({ approvedAddress }: {
        approvedAddress: string;
    }): Promise<UploadResponse>;
}
type GetApprovedBalanceResponseBody = {
    amount: string;
    expiresBy?: StringifiedNumber<UnixEpochMs>;
};
export declare enum UploadApprovalTags {
    APPROVE_PAYMENT = "x-irys-approve-payment",
    DELETE_APPROVAL = "x-irys-delete-payment-approval"
}
export declare enum UploadApprovalMetaTags {
    AMOUNT = "x-amount",
    EXPIRE_SECONDS = "x-expire-seconds"
}
export {};
