import { ArconnectSigner } from "arbundles";
import BigNumber from "bignumber.js";
import type { TokenConfig, Tx } from "../../common/types.js";
import { Arweave } from "../utils.js";
import BaseWebToken from "./base.js";
import type { WebIrysConfig } from "../types.js";
import { BaseWebIrys } from "../base.js";
export default class ArweaveConfig extends BaseWebToken {
    protected providerInstance: Arweave;
    isSlow: boolean;
    opts?: {
        provider?: "arconnect" | "arweave.app";
        network?: string;
    };
    protected wallet: Window["arweaveWallet"];
    protected signerInstance: ArconnectSigner;
    constructor(config: TokenConfig<Window["arweaveWallet"]>);
    private getProvider;
    getTx(txId: string): Promise<Tx>;
    ownerToAddress(owner: any): string;
    sign(data: Uint8Array): Promise<Uint8Array>;
    getSigner(): ArconnectSigner;
    verify(pub: any, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    getCurrentHeight(): Promise<BigNumber>;
    getFee(amount: BigNumber.Value, to?: string): Promise<BigNumber>;
    sendTx(data: any): Promise<any>;
    createTx(amount: BigNumber.Value, to: string, fee?: string): Promise<{
        txId: string | undefined;
        tx: any;
    }>;
    getPublicKey(): Promise<string>;
    ready(): Promise<void>;
}
export declare class ArweaveWebIrys extends BaseWebIrys {
    constructor({ url, wallet, config }: WebIrysConfig<Window["arweaveWallet"]>);
}
