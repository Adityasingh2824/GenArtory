import "../common/hack.js";
import Api from "../common/api.js";
import Fund from "../common/fund.js";
import Irys from "../common/irys.js";
import Utils from "../common/utils.js";
import { Provenance } from "../common/provenance.js";
import { Transaction } from "../common/transactions.js";
import * as arbundles from "./utils.js";
import { WebUploader } from "./upload.js";
import { Approval } from "../common/approval.js";
export class BaseWebIrys extends Irys {
    tokenConfig;
    uploader;
    uploadFolder;
    uploadFile;
    constructor({ url, network, wallet, config, getTokenConfig, }) {
        // @ts-expect-error types
        super({ url, network, arbundles });
        this.api = new Api({
            url: this.url,
            timeout: config?.timeout ?? 100000,
            headers: config?.headers,
        });
        this.tokenConfig = getTokenConfig(this);
        if (this.url.host.includes("devnet.irys.xyz") && !(config?.providerUrl || wallet?.rpcUrl || this?.tokenConfig?.inheritsRPC))
            throw new Error(`Using ${this.url.host} requires a dev/testnet RPC to be configured! see https://docs.irys.xyz/developer-docs/using-devnet`);
        this.token = this.tokenConfig.name;
        this.utils = new Utils(this.api, this.token, this.tokenConfig);
        this.uploader = new WebUploader(this);
        this.funder = new Fund(this.utils);
        this.uploader = new WebUploader(this);
        this.provenance = new Provenance(this);
        this.transactions = new Transaction(this);
        this.approval = new Approval(this);
        this.address = "Please run `await Irys.ready()`";
        this.uploadFolder = this.uploader.uploadFolder.bind(this.uploader);
        this.uploadFile = this.uploader.uploadFile.bind(this.uploader);
    }
}
//# sourceMappingURL=base.js.map