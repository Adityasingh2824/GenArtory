import BigNumber from "bignumber.js";
import { BigNumber as EthBigNumber } from "@ethersproject/bignumber";
import EthereumConfig from "../../tokens/ethereum.js";
export class EthereumEthersV6 extends EthereumConfig {
    async createTx(amount, to, _fee) {
        const signer = this.w3signer;
        const tx = { to, from: this.address, value: amount.toString(), gasLimit: BigInt(0) };
        const estimatedGas = await this.provider.estimateGas(tx);
        tx.gasLimit = estimatedGas;
        const txr = await signer.populateTransaction(tx);
        return { tx: txr, txId: undefined };
    }
    async getTx(txId) {
        const provider = this.provider;
        const response = await provider.getTransaction(txId);
        if (!response)
            throw new Error("Tx doesn't exist");
        if (!response.to)
            throw new Error(`Unable to resolve transactions ${txId} receiver`);
        return {
            from: response.from,
            to: response.to,
            blockHeight: response.blockNumber ? new BigNumber(response.blockNumber) : undefined,
            amount: new BigNumber(response.value.toString()),
            pending: response.blockNumber ? false : true,
            confirmed: (await response.confirmations()) >= this.minConfirm,
        };
    }
    async getFee(amount, to) {
        const provider = this.providerInstance;
        const tx = {
            to,
            from: this.address,
            value: "0x" + new BigNumber(amount).toString(16),
        };
        const estimatedGas = await provider.estimateGas(tx);
        const gasPrice = await provider.getGasPrice();
        return new BigNumber(gasPrice.mul(estimatedGas).toString());
    }
    async ready() {
        const provider = this.wallet;
        this.provider = provider;
        const signer = await provider.getSigner();
        signer._signTypedData = async (domain, types, value) => signer.signTypedData(domain, types, value);
        // @ts-expect-error fix
        provider.getSigner = () => signer;
        // @ts-expect-error fix
        this.wallet = provider;
        provider.getGasPrice = async () => provider.getFeeData().then((r) => EthBigNumber.from(r.gasPrice ?? 0));
        // @ts-expect-error fix
        this.providerInstance = provider;
        await super.ready();
    }
}
//# sourceMappingURL=ethersv6.js.map