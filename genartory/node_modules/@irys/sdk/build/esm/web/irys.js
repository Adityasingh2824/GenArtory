import { BaseWebIrys } from "./base.js";
import getTokenConfig from "./tokens/index.js";
export class WebIrys extends BaseWebIrys {
    constructor({ url, network, token, wallet, config, }) {
        super({
            url,
            wallet,
            config,
            network,
            getTokenConfig: (irys) => getTokenConfig({
                irys,
                token: token.toLowerCase(),
                wallet: wallet?.provider ?? wallet,
                providerUrl: config?.providerUrl ?? wallet?.rpcUrl,
                contractAddress: config?.contractAddress,
                providerName: wallet?.name,
                tokenOpts: { ...config?.tokenOpts, ...wallet },
            }),
        });
    }
    static async init(opts) {
        const { url, token, provider, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;
        const Irys = new WebIrys({
            url,
            token,
            // @ts-expect-error types
            wallet: { name: "init", provider: signingFunction ? publicKey : provider },
            config: {
                providerUrl,
                timeout,
                contractAddress,
                tokenOpts: { signingFunction, collectSignatures },
            },
        });
        await Irys.ready();
        return Irys;
    }
}
export default WebIrys;
//# sourceMappingURL=irys.js.map