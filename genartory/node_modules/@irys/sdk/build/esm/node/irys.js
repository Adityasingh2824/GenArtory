import { BaseNodeIrys } from "./base.js";
import getTokenConfig from "./tokens/index.js";
export class NodeIrys extends BaseNodeIrys {
    /**
     * Constructs a new Irys instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param key - private key (in whatever form required)
     */
    constructor({ url, token, network, key, config }) {
        super({
            url,
            config,
            network,
            getTokenConfig: (irys) => {
                return getTokenConfig(irys, token.toLowerCase(), key, irys.api.getConfig().url.toString(), config?.providerUrl, config?.contractAddress, config?.tokenOpts);
            },
        });
    }
    static async init(opts) {
        const { url, token, privateKey, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;
        const Irys = new NodeIrys({
            url,
            token,
            key: signingFunction ? publicKey : privateKey,
            config: {
                providerUrl,
                timeout,
                contractAddress,
                tokenOpts: { signingFunction, collectSignatures },
            },
        });
        await Irys.ready();
        return Irys;
    }
}
export default NodeIrys;
//# sourceMappingURL=irys.js.map