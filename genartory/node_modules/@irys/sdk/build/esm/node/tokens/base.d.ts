/// <reference types="node" />
import type { Signer } from "arbundles";
import type BigNumber from "bignumber.js";
import type { Tx, TokenConfig } from "../../common/types.js";
import type { NodeToken } from "../types.js";
import type Utils from "../../common/utils.js";
import type BaseNodeIrys from "../base.js";
export declare abstract class BaseNodeToken implements NodeToken {
    base: [string, number];
    protected wallet: any;
    protected _address: string | undefined;
    protected providerUrl: any;
    protected providerInstance?: any;
    ticker: string;
    name: string;
    protected minConfirm: number;
    isSlow: boolean;
    needsFee: boolean;
    protected opts?: any;
    protected utils: Utils;
    irys: BaseNodeIrys;
    constructor(config: TokenConfig);
    get address(): string | undefined;
    price(): Promise<number>;
    abstract getTx(_txId: string): Promise<Tx>;
    abstract ownerToAddress(_owner: any): string;
    abstract sign(_data: Uint8Array): Promise<Uint8Array>;
    abstract getSigner(): Signer;
    abstract verify(_pub: any, _data: Uint8Array, _signature: Uint8Array): Promise<boolean>;
    abstract getCurrentHeight(): Promise<BigNumber>;
    abstract getFee(_amount: BigNumber.Value, _to?: string, _multiplier?: BigNumber.Value): Promise<BigNumber | object>;
    abstract sendTx(_data: any): Promise<string | undefined>;
    abstract createTx(_amount: BigNumber.Value, _to: string, _fee?: string | object): Promise<{
        txId: string | undefined;
        tx: any;
    }>;
    abstract getPublicKey(): string | Buffer;
}
export declare function getRedstonePrice(token: string): Promise<number>;
