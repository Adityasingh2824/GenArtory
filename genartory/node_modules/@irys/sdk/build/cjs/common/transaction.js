"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const crypto_1 = tslib_1.__importDefault(require("crypto"));
/**
 * Extended DataItem that allows for seamless Irys operations, such as signing and uploading.
 * Takes the same parameters as a regular DataItem.
 */
function buildIrysTransaction(irys) {
    class IrysTransaction extends irys.arbundles.DataItem {
        constructor(data, irys, opts) {
            var _a;
            super((opts === null || opts === void 0 ? void 0 : opts.dataIsRawTransaction) === true
                ? Buffer.from(data)
                : irys.arbundles
                    .createData(data, irys.tokenConfig.getSigner(), Object.assign(Object.assign({}, opts), { anchor: (_a = opts === null || opts === void 0 ? void 0 : opts.anchor) !== null && _a !== void 0 ? _a : crypto_1.default.randomBytes(32).toString("base64").slice(0, 32) }))
                    .getRaw());
            this.Irys = irys;
            this.signer = irys.tokenConfig.getSigner();
        }
        sign() {
            return super.sign(this.signer);
        }
        get size() {
            return this.getRaw().length;
        }
        /**
         * @deprecated use upload
         */
        uploadWithReceipt(opts) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return (yield this.Irys.uploader.uploadTransaction(this, opts)).data;
            });
        }
        upload(opts) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return (yield this.Irys.uploader.uploadTransaction(this, opts)).data;
            });
        }
        // static fromRaw(rawTransaction: Buffer, IrysInstance: Irys): IrysTransaction {
        //   return new IrysTransaction(rawTransaction, IrysInstance, { dataIsRawTransaction: true });
        // }
        getPrice() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return this.Irys.utils.getPrice(this.Irys.tokenConfig.name, this.size);
            });
        }
        isValid() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                return irys.arbundles.DataItem.verify(this.getRaw());
            });
        }
    }
    return IrysTransaction;
}
exports.default = buildIrysTransaction;
// export abstract class IrysTransaction extends DataItem {}
// export interface IrysTransaction extends DataItem {
//   size: number;
//   uploadWithReceipt(opts?: UploadOptions): Promise<UploadReceipt>;
//   upload(opts: UploadOptions & { getReceiptSignature: true }): Promise<UploadReceipt>;
//   upload(opts?: UploadOptions): Promise<UploadResponse>;
// }
//# sourceMappingURL=transaction.js.map