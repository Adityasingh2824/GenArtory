"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseNodeIrys = void 0;
const tslib_1 = require("tslib");
require("../common/hack.js");
const transactions_1 = require("../common/transactions");
const api_1 = tslib_1.__importDefault(require("../common/api"));
const fund_1 = tslib_1.__importDefault(require("../common/fund"));
const irys_1 = tslib_1.__importDefault(require("../common/irys"));
const utils_1 = tslib_1.__importDefault(require("../common/utils"));
const upload_1 = tslib_1.__importDefault(require("./upload"));
const arbundles = tslib_1.__importStar(require("./utils"));
const provenance_1 = require("./provenance");
const approval_1 = require("../common/approval");
class BaseNodeIrys extends irys_1.default {
    /**
     * Constructs a new Irys instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param key - private key (in whatever form required)
     */
    constructor({ url, network, config, getTokenConfig, }) {
        var _a;
        super({ url, network, arbundles });
        this.api = new api_1.default({
            url: this.url,
            timeout: (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : 100000,
            headers: config === null || config === void 0 ? void 0 : config.headers,
        });
        this.tokenConfig = getTokenConfig(this);
        if (this.url.host.includes("devnet.irys.xyz") && !(config === null || config === void 0 ? void 0 : config.providerUrl))
            throw new Error(`Using ${this.url.host} requires a dev/testnet RPC to be configured! see https://docs.irys.xyz/developer-docs/using-devnet`);
        this.token = this.tokenConfig.name;
        this.address = this.tokenConfig.address;
        this.utils = new utils_1.default(this.api, this.token, this.tokenConfig);
        this.funder = new fund_1.default(this.utils);
        this.uploader = new upload_1.default(this.api, this.utils, this.token, this.tokenConfig, this.IrysTransaction);
        this.provenance = new provenance_1.NodeProvenance(this);
        this.transactions = new transactions_1.Transaction(this);
        this.approval = new approval_1.Approval(this);
        this._readyPromise = this.tokenConfig.ready ? this.tokenConfig.ready() : new Promise((r) => r());
    }
    /**
     * Upload a file at the specified path to the bundler
     * @param path path to the file to upload
     * @returns bundler response
     */
    uploadFile(path, opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.uploader.uploadFile(path, opts);
        });
    }
    /**
     * @param path - path to the folder to be uploaded
     * @param indexFile - path to the index file (i.e index.html)
     * @param batchSize - number of items to upload concurrently
     * @param interactivePreflight - whether to interactively prompt the user for confirmation of upload (CLI ONLY)
     * @param keepDeleted - Whether to keep previously uploaded (but now deleted) files in the manifest
     * @param logFunction - for handling logging from the uploader for UX
     * @param manifestTags - For allowing the caller to pass tags that will be added to the manifest transaction.
     * @returns
     */
    uploadFolder(path, { batchSize = 10, keepDeleted = true, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions, } = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.uploader.uploadFolder(path, { indexFile, batchSize, interactivePreflight, keepDeleted, logFunction, manifestTags, itemOptions });
        });
    }
}
exports.BaseNodeIrys = BaseNodeIrys;
exports.default = BaseNodeIrys;
//# sourceMappingURL=base.js.map