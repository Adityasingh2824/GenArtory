"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const arbundles_1 = require("arbundles");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const bs58_1 = tslib_1.__importDefault(require("bs58"));
const tweetnacl_1 = tslib_1.__importDefault(require("tweetnacl"));
const base_1 = require("./base");
const async_retry_1 = tslib_1.__importDefault(require("async-retry"));
const web3_js_1 = require("@solana/web3.js");
class SolanaConfig extends base_1.BaseNodeToken {
    constructor(config) {
        var _a, _b;
        super(config);
        this.minConfirm = 1;
        this.finality = "finalized";
        this.base = ["lamports", 1e9];
        this.finality = (_b = (_a = this === null || this === void 0 ? void 0 : this.opts) === null || _a === void 0 ? void 0 : _a.finality) !== null && _b !== void 0 ? _b : "finalized";
    }
    getProvider() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.providerInstance) {
                this.providerInstance = new web3_js_1.Connection(this.providerUrl, {
                    confirmTransactionInitialTimeout: 60000,
                    commitment: this.finality,
                });
            }
            return this.providerInstance;
        });
    }
    getKeyPair() {
        let key = this.wallet;
        if (typeof key !== "string") {
            key = bs58_1.default.encode(Buffer.from(key));
        }
        return web3_js_1.Keypair.fromSecretKey(bs58_1.default.decode(key));
    }
    getTx(txId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getProvider();
            const stx = yield connection.getTransaction(txId, { commitment: this.finality, maxSupportedTransactionVersion: 0 });
            if (!stx)
                throw new Error("Confirmed tx not found");
            const currentSlot = yield connection.getSlot(this.finality);
            if (!stx.meta)
                throw new Error(`Unable to resolve transaction ${txId}`);
            const amount = new bignumber_js_1.default(stx.meta.postBalances[1]).minus(new bignumber_js_1.default(stx.meta.preBalances[1]));
            const staticAccountKeys = stx.transaction.message.getAccountKeys().staticAccountKeys;
            const tx = {
                from: staticAccountKeys[0].toBase58(),
                to: staticAccountKeys[1].toBase58(),
                amount: amount,
                blockHeight: new bignumber_js_1.default(stx.slot),
                pending: false,
                confirmed: currentSlot - stx.slot >= 1,
            };
            return tx;
        });
    }
    ownerToAddress(owner) {
        return bs58_1.default.encode(owner);
    }
    sign(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield (yield this.getSigner()).sign(data);
        });
    }
    getSigner() {
        const keyp = this.getKeyPair();
        const keypb = bs58_1.default.encode(Buffer.concat([Buffer.from(keyp.secretKey), keyp.publicKey.toBuffer()]));
        return new arbundles_1.HexSolanaSigner(keypb);
    }
    verify(pub, data, signature) {
        return arbundles_1.HexSolanaSigner.verify(pub, data, signature);
    }
    getCurrentHeight() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default((_a = (yield (yield this.getProvider()).getEpochInfo()).blockHeight) !== null && _a !== void 0 ? _a : 0);
        });
    }
    getFee(amount, to, multiplier) {
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getProvider();
            const unsignedTx = yield this._createTxUnsigned(amount, to !== null && to !== void 0 ? to : "DHyDV2ZjN3rB6qNGXS48dP5onfbZd3fAEz6C5HJwSqRD");
            const computeBudget = new bignumber_js_1.default((_a = (yield unsignedTx.getEstimatedFee(connection))) !== null && _a !== void 0 ? _a : 5000);
            const recentPrio = yield ((_b = connection === null || connection === void 0 ? void 0 : connection.getRecentPrioritizationFees) === null || _b === void 0 ? void 0 : _b.call(connection).catch((_) => [{ prioritizationFee: 0 }]));
            const prioAvg = recentPrio
                .reduce((n, p) => n.plus(p.prioritizationFee), new bignumber_js_1.default(0))
                .dividedToIntegerBy((_c = recentPrio.length) !== null && _c !== void 0 ? _c : 1);
            return { computeBudget, computeUnitPrice: prioAvg.multipliedBy(multiplier !== null && multiplier !== void 0 ? multiplier : 1).integerValue(bignumber_js_1.default.ROUND_CEIL) };
        });
    }
    sendTx(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getProvider();
            try {
                return yield (0, web3_js_1.sendAndConfirmTransaction)(connection, data, [this.getKeyPair()], { commitment: this.finality });
            }
            catch (e) {
                if (e.message.includes("30.")) {
                    const txId = e.message.match(/[A-Za-z0-9]{87,88}/g);
                    if (!txId)
                        throw e;
                    try {
                        const conf = yield connection.confirmTransaction({ signature: txId[0], blockhash: data.recentBlockhash, lastValidBlockHeight: data.lastValidBlockHeight }, this.finality);
                        if (conf)
                            return undefined;
                        throw {
                            message: e.message,
                            txId: txId[0],
                        };
                    }
                    catch (e) {
                        throw {
                            message: e.message,
                            txId: txId[0],
                        };
                    }
                }
                throw e;
            }
        });
    }
    _createTxUnsigned(amount, to, fee) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const keys = this.getKeyPair();
            const blockHashInfo = yield (0, async_retry_1.default)((bail) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _c;
                try {
                    return yield (yield this.getProvider()).getLatestBlockhash(this.finality);
                }
                catch (e) {
                    if ((_c = e.message) === null || _c === void 0 ? void 0 : _c.includes("blockhash"))
                        throw e;
                    else
                        bail(e);
                    throw new Error("Unreachable");
                }
            }), { retries: 3, minTimeout: 1000 });
            const transaction = new web3_js_1.Transaction(Object.assign(Object.assign({}, blockHashInfo), { feePayer: keys.publicKey }));
            transaction.add(web3_js_1.SystemProgram.transfer({
                fromPubkey: keys.publicKey,
                toPubkey: new web3_js_1.PublicKey(to),
                lamports: +new bignumber_js_1.default(amount).toNumber(),
            }));
            if (!((_b = (_a = this === null || this === void 0 ? void 0 : this.config) === null || _a === void 0 ? void 0 : _a.opts) === null || _b === void 0 ? void 0 : _b.disablePriorityFees) && fee) {
                transaction.add(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({ microLamports: fee.computeUnitPrice.toNumber() }));
                transaction.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({ units: fee.computeBudget.toNumber() }));
            }
            return transaction;
        });
    }
    createTx(amount, to, fee) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const keys = this.getKeyPair();
            const unsignedTx = yield this._createTxUnsigned(amount, to, fee);
            const transactionBuffer = unsignedTx.serializeMessage();
            const signature = tweetnacl_1.default.sign.detached(transactionBuffer, keys.secretKey);
            unsignedTx.addSignature(keys.publicKey, Buffer.from(signature));
            return { tx: unsignedTx, txId: undefined };
        });
    }
    getPublicKey() {
        const key = this.getKeyPair();
        return key.publicKey.toBuffer();
    }
}
exports.default = SolanaConfig;
//# sourceMappingURL=solana.js.map