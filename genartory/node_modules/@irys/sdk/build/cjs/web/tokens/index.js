"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ethereum_1 = tslib_1.__importDefault(require("./ethereum"));
const near_1 = tslib_1.__importDefault(require("./near"));
const solana_1 = tslib_1.__importDefault(require("./solana"));
const erc20_1 = tslib_1.__importDefault(require("./erc20"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const utils_1 = tslib_1.__importDefault(require("../../common/utils"));
const aptos_1 = tslib_1.__importDefault(require("./aptos"));
const ethersv5_1 = require("../providers/ethereum/ethersv5");
const ethersv6_1 = require("../providers/ethereum/ethersv6");
const arweave_1 = tslib_1.__importDefault(require("./arweave"));
const privy_1 = require("../shims/privy");
const viemv2_1 = require("../shims/viemv2");
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
function getTokenConfig({ irys, token, wallet, providerUrl, contractAddress, providerName, tokenOpts: opts, }) {
    switch (token) {
        case "ethereum":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "ethereum",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://cloudflare-eth.com/",
                    wallet: wallet,
                    opts,
                },
            });
        case "matic":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "matic",
                    ticker: "MATIC",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://polygon-rpc.com",
                    wallet: wallet,
                    minConfirm: 1,
                    opts,
                },
            });
        case "arbitrum":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "arbitrum",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://arb1.arbitrum.io/rpc",
                    wallet: wallet,
                    opts,
                },
            });
        case "bnb":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "bnb",
                    ticker: "BNB",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://bsc-dataseed.binance.org",
                    wallet: wallet,
                    opts,
                },
            });
        case "avalanche":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "avalanche",
                    ticker: "AVAX",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://api.avax.network/ext/bc/C/rpc",
                    wallet: wallet,
                    opts,
                },
            });
        case "boba-eth":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "boba-eth",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://mainnet.boba.network/",
                    minConfirm: 1,
                    wallet: wallet,
                    opts,
                },
            });
        case "boba": {
            const k = new erc20_1.default({
                irys: irys,
                name: "boba",
                ticker: "BOBA",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://mainnet.boba.network/",
                contractAddress: contractAddress !== null && contractAddress !== void 0 ? contractAddress : "0xa18bF3994C0Cc6E3b63ac420308E5383f53120D7",
                minConfirm: 1,
                wallet: wallet,
                opts,
            });
            // for L1 mainnet: "https://main-light.eth.linkpool.io/" and "0x42bbfa2e77757c645eeaad1655e0911a7553efbc"
            k.price = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a;
                const res = yield axios_1.default.post("https://api.livecoinwatch.com/coins/single", JSON.stringify({ currency: "USD", code: `${k.ticker}` }), {
                    headers: { "x-api-key": "75a7a824-6577-45e6-ad86-511d590c7cc8", "content-type": "application/json" },
                });
                yield utils_1.default.checkAndThrow(res, "Getting price data");
                if (!((_a = res === null || res === void 0 ? void 0 : res.data) === null || _a === void 0 ? void 0 : _a.rate)) {
                    throw new Error(`unable to get price for ${k.name}`);
                }
                return +res.data.rate;
            });
            return k;
        }
        case "solana":
            return new solana_1.default({
                irys: irys,
                name: "solana",
                ticker: "SOL",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://api.mainnet-beta.solana.com/",
                wallet: wallet,
                opts,
            });
        // case "algorand":
        //     return new AlgorandConfig({ name: "algorand", ticker: "ALGO", providerUrl: providerUrl ?? "https://api.mainnet-beta.solana.com/", wallet: wallet })
        case "near":
            return new near_1.default({
                irys: irys,
                name: "near",
                ticker: "NEAR",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://rpc.mainnet.near.org",
                wallet: wallet,
                opts,
            });
        case "aptos":
            return new aptos_1.default({
                irys: irys,
                name: "aptos",
                ticker: "APTOS",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : ts_sdk_1.Network.MAINNET,
                wallet: wallet,
                opts,
            });
        case "arweave":
            return new arweave_1.default({
                irys: irys,
                name: "arweave",
                ticker: "AR",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://arweave.net",
                wallet: wallet,
                opts,
            });
        case "base-eth":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "base-eth",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://mainnet.base.org/",
                    minConfirm: 2,
                    wallet: wallet,
                    opts,
                },
            });
        case "usdc-eth":
            return new erc20_1.default({
                irys: irys,
                name: "usdc-eth",
                ticker: "USDC",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://cloudflare-eth.com/",
                contractAddress: contractAddress !== null && contractAddress !== void 0 ? contractAddress : "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                wallet,
                opts,
            });
        case "usdc-polygon":
            return new erc20_1.default({
                irys,
                name: "usdc-polygon",
                ticker: "USDC",
                providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://polygon-rpc.com",
                contractAddress: contractAddress !== null && contractAddress !== void 0 ? contractAddress : "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359",
                opts,
            });
        case "bera":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "bera",
                    ticker: "BERA",
                    // TODO: make sure this is set to mainnet
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://artio.rpc.berachain.com/",
                    wallet: wallet,
                    opts,
                },
            });
        case "scroll-eth":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "scroll-eth",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://rpc.scroll.io",
                    wallet: wallet,
                    opts,
                },
            });
        case "linea-eth":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "linea-eth",
                    ticker: "ETH",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://rpc.linea.build",
                    wallet: wallet,
                    opts,
                },
            });
        case "iotex":
            return resolveProvider({
                family: "ethereum",
                providerName,
                config: {
                    irys: irys,
                    name: "iotex",
                    ticker: "IOTX",
                    providerUrl: providerUrl !== null && providerUrl !== void 0 ? providerUrl : "https://babel-api.mainnet.iotex.io/",
                    wallet: wallet,
                    opts,
                },
            });
        default:
            throw new Error(`Unknown/Unsupported token ${token}`);
    }
}
exports.default = getTokenConfig;
function resolveProvider({ family, providerName, config, }) {
    let cfg;
    switch (family) {
        case "ethereum":
            switch (providerName) {
                case "ethersv5":
                    return new ethersv5_1.EthereumEthersV5(config);
                case "ethersv6":
                    return new ethersv6_1.EthereumEthersV6(config);
                case "privy-embedded":
                    cfg = new ethersv5_1.EthereumEthersV5(config);
                    (0, privy_1.augmentTokenPrivy)(cfg, config.opts);
                    return cfg;
                case "viemv2":
                    cfg = new ethereum_1.default(config);
                    (0, viemv2_1.augmentViemV2)(cfg, config.opts);
                    return cfg;
                default:
                    return new ethereum_1.default(config);
            }
        default:
            throw new Error(`Unknown token family ${family}`);
    }
}
//# sourceMappingURL=index.js.map