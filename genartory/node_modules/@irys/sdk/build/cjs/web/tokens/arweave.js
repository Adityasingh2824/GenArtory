"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArweaveWebIrys = void 0;
const tslib_1 = require("tslib");
const arbundles_1 = require("arbundles");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const crypto_1 = tslib_1.__importDefault(require("crypto"));
const base64url_1 = tslib_1.__importDefault(require("base64url"));
const utils_1 = require("../utils");
const base_1 = tslib_1.__importDefault(require("./base"));
const base_2 = require("../base");
class ArweaveConfig extends base_1.default {
    constructor(config) {
        super(config);
        this.isSlow = true;
        this.base = ["winston", 1e12];
        this.needsFee = true;
    }
    getProvider() {
        var _a, _b;
        if (!this.providerInstance) {
            const purl = new URL((_a = this.providerUrl) !== null && _a !== void 0 ? _a : "https://arweave.net");
            // let config;
            // try {
            //   config = this.wallet.getArweaveConfig();
            // } catch (e) {}
            this.providerInstance = utils_1.Arweave.init(
            /* config ??  */ {
                url: purl,
                network: (_b = this === null || this === void 0 ? void 0 : this.opts) === null || _b === void 0 ? void 0 : _b.network,
            });
        }
        return this.providerInstance;
    }
    getTx(txId) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const arweave = yield this.getProvider();
            const txs = yield arweave.transactions.getStatus(txId);
            let tx;
            if (txs.status === 200) {
                tx = yield arweave.transactions.get(txId);
            }
            const confirmed = txs.status !== 202 && ((_b = (_a = txs.confirmed) === null || _a === void 0 ? void 0 : _a.number_of_confirmations) !== null && _b !== void 0 ? _b : 0) >= this.minConfirm;
            let owner;
            if (tx === null || tx === void 0 ? void 0 : tx.owner) {
                owner = this.ownerToAddress(tx.owner);
            }
            return {
                from: owner !== null && owner !== void 0 ? owner : undefined,
                to: (_c = tx === null || tx === void 0 ? void 0 : tx.target) !== null && _c !== void 0 ? _c : undefined,
                amount: new bignumber_js_1.default((_d = tx === null || tx === void 0 ? void 0 : tx.quantity) !== null && _d !== void 0 ? _d : 0),
                pending: txs.status === 202,
                confirmed,
            };
        });
    }
    ownerToAddress(owner) {
        return utils_1.Arweave.utils.bufferTob64Url(crypto_1.default
            .createHash("sha256")
            .update(utils_1.Arweave.utils.b64UrlToBuffer(Buffer.isBuffer(owner) ? (0, base64url_1.default)(owner) : owner))
            .digest());
    }
    sign(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.getSigner().sign(data);
        });
    }
    getSigner() {
        var _a, _b;
        if (this.signerInstance)
            return this.signerInstance;
        switch ((_b = (_a = this === null || this === void 0 ? void 0 : this.opts) === null || _a === void 0 ? void 0 : _a.provider) !== null && _b !== void 0 ? _b : "arconnect") {
            case "arconnect":
                this.signerInstance = new arbundles_1.ArconnectSigner(this.wallet, this.getProvider());
        }
        return this.signerInstance;
    }
    verify(pub, data, signature) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (Buffer.isBuffer(pub)) {
                pub = pub.toString();
            }
            return this.getProvider().crypto.verify(pub, data, signature);
        });
    }
    getCurrentHeight() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return (yield this.getProvider()).network.getInfo().then((r) => new bignumber_js_1.default(r.height));
        });
    }
    getFee(amount, to) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default(yield (yield this.getProvider()).transactions.getPrice(new bignumber_js_1.default(amount).toNumber(), to)).integerValue(bignumber_js_1.default.ROUND_CEIL);
        });
    }
    sendTx(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield (yield this.getProvider()).transactions.post(data);
        });
    }
    createTx(amount, to, fee) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const arweave = yield this.getProvider();
            const atx = yield arweave.createTransaction({ quantity: new bignumber_js_1.default(amount).toString(), reward: fee === null || fee === void 0 ? void 0 : fee.toString(), target: to });
            // @ts-expect-error override
            atx.merkle = undefined;
            // @ts-expect-error override
            atx.deepHash = undefined;
            // @ts-expect-error types
            const tx = yield this.wallet.sign(atx);
            return { txId: tx.id, tx };
        });
    }
    getPublicKey() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const signer = this.getSigner();
            yield signer.setPublicKey();
            return utils_1.Arweave.utils.bufferTob64Url(signer.publicKey);
        });
    }
    ready() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pubKey = yield this.getPublicKey();
            const address = this.ownerToAddress(pubKey);
            this._address = address;
        });
    }
}
exports.default = ArweaveConfig;
class ArweaveWebIrys extends base_2.BaseWebIrys {
    constructor({ url, wallet, config }) {
        super({
            url,
            wallet,
            config,
            getTokenConfig: (irys) => {
                var _a;
                return new ArweaveConfig({
                    irys,
                    name: "arweave",
                    ticker: "AR",
                    providerUrl: (_a = config === null || config === void 0 ? void 0 : config.providerUrl) !== null && _a !== void 0 ? _a : "https://arweave.net",
                    wallet: wallet.provider,
                });
            },
        });
    }
}
exports.ArweaveWebIrys = ArweaveWebIrys;
//# sourceMappingURL=arweave.js.map