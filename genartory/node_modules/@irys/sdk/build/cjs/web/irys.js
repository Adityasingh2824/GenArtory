"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebIrys = void 0;
const tslib_1 = require("tslib");
const base_1 = require("./base");
const tokens_1 = tslib_1.__importDefault(require("./tokens"));
class WebIrys extends base_1.BaseWebIrys {
    constructor({ url, network, token, wallet, config, }) {
        super({
            url,
            wallet,
            config,
            network,
            getTokenConfig: (irys) => {
                var _a, _b;
                return (0, tokens_1.default)({
                    irys,
                    token: token.toLowerCase(),
                    wallet: (_a = wallet === null || wallet === void 0 ? void 0 : wallet.provider) !== null && _a !== void 0 ? _a : wallet,
                    providerUrl: (_b = config === null || config === void 0 ? void 0 : config.providerUrl) !== null && _b !== void 0 ? _b : wallet === null || wallet === void 0 ? void 0 : wallet.rpcUrl,
                    contractAddress: config === null || config === void 0 ? void 0 : config.contractAddress,
                    providerName: wallet === null || wallet === void 0 ? void 0 : wallet.name,
                    tokenOpts: Object.assign(Object.assign({}, config === null || config === void 0 ? void 0 : config.tokenOpts), wallet),
                });
            },
        });
    }
    static init(opts) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { url, token, provider, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;
            const Irys = new WebIrys({
                url,
                token,
                // @ts-expect-error types
                wallet: { name: "init", provider: signingFunction ? publicKey : provider },
                config: {
                    providerUrl,
                    timeout,
                    contractAddress,
                    tokenOpts: { signingFunction, collectSignatures },
                },
            });
            yield Irys.ready();
            return Irys;
        });
    }
}
exports.WebIrys = WebIrys;
exports.default = WebIrys;
//# sourceMappingURL=irys.js.map