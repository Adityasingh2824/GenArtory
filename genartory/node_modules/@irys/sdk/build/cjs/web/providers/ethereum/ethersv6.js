"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumEthersV6 = void 0;
const tslib_1 = require("tslib");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const bignumber_1 = require("@ethersproject/bignumber");
const ethereum_1 = tslib_1.__importDefault(require("../../tokens/ethereum"));
class EthereumEthersV6 extends ethereum_1.default {
    createTx(amount, to, _fee) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const signer = this.w3signer;
            const tx = { to, from: this.address, value: amount.toString(), gasLimit: BigInt(0) };
            const estimatedGas = yield this.provider.estimateGas(tx);
            tx.gasLimit = estimatedGas;
            const txr = yield signer.populateTransaction(tx);
            return { tx: txr, txId: undefined };
        });
    }
    getTx(txId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const provider = this.provider;
            const response = yield provider.getTransaction(txId);
            if (!response)
                throw new Error("Tx doesn't exist");
            if (!response.to)
                throw new Error(`Unable to resolve transactions ${txId} receiver`);
            return {
                from: response.from,
                to: response.to,
                blockHeight: response.blockNumber ? new bignumber_js_1.default(response.blockNumber) : undefined,
                amount: new bignumber_js_1.default(response.value.toString()),
                pending: response.blockNumber ? false : true,
                confirmed: (yield response.confirmations()) >= this.minConfirm,
            };
        });
    }
    getFee(amount, to) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const provider = this.providerInstance;
            const tx = {
                to,
                from: this.address,
                value: "0x" + new bignumber_js_1.default(amount).toString(16),
            };
            const estimatedGas = yield provider.estimateGas(tx);
            const gasPrice = yield provider.getGasPrice();
            return new bignumber_js_1.default(gasPrice.mul(estimatedGas).toString());
        });
    }
    ready() {
        const _super = Object.create(null, {
            ready: { get: () => super.ready }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const provider = this.wallet;
            this.provider = provider;
            const signer = yield provider.getSigner();
            signer._signTypedData = (domain, types, value) => tslib_1.__awaiter(this, void 0, void 0, function* () { return signer.signTypedData(domain, types, value); });
            // @ts-expect-error fix
            provider.getSigner = () => signer;
            // @ts-expect-error fix
            this.wallet = provider;
            provider.getGasPrice = () => tslib_1.__awaiter(this, void 0, void 0, function* () { return provider.getFeeData().then((r) => { var _a; return bignumber_1.BigNumber.from((_a = r.gasPrice) !== null && _a !== void 0 ? _a : 0); }); });
            // @ts-expect-error fix
            this.providerInstance = provider;
            yield _super.ready.call(this);
        });
    }
}
exports.EthereumEthersV6 = EthereumEthersV6;
//# sourceMappingURL=ethersv6.js.map